{"ast":null,"code":"import _get from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _construct from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";\nimport _slicedToArray from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _wrapNativeSuper from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nimport _asyncToGenerator from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _possibleConstructorReturn from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\ReactProjects\\\\amazon\\\\amazon-clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e18) { throw _e18; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e19) { didErr = true; err = _e19; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar d = /*#__PURE__*/function () {\n  function d(t) {\n    _classCallCheck(this, d);\n    this.uid = t;\n  }\n  _createClass(d, [{\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n  }, {\n    key: \"toKey\",\n    value: function toKey() {\n      return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t.uid === this.uid;\n    }\n  }]);\n  return d;\n}();\n/** A user with a null UID. */\nd.UNAUTHENTICATED = new d(null),\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nd.GOOGLE_CREDENTIALS = new d(\"google-credentials-uid\"), d.FIRST_PARTY = new d(\"first-party-uid\"), d.MOCK_USER = new d(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar w = \"9.17.2\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar m = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nfunction p(t) {\n  m.setLogLevel(t);\n}\nfunction y(t) {\n  if (m.logLevel <= LogLevel.DEBUG) {\n    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      e[_key - 1] = arguments[_key];\n    }\n    var n = e.map(v);\n    m.debug.apply(m, [\"Firestore (\".concat(w, \"): \").concat(t)].concat(_toConsumableArray(n)));\n  }\n}\nfunction g(t) {\n  if (m.logLevel <= LogLevel.ERROR) {\n    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      e[_key2 - 1] = arguments[_key2];\n    }\n    var n = e.map(v);\n    m.error.apply(m, [\"Firestore (\".concat(w, \"): \").concat(t)].concat(_toConsumableArray(n)));\n  }\n}\n\n/**\n * @internal\n */\nfunction _(t) {\n  if (m.logLevel <= LogLevel.WARN) {\n    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      e[_key3 - 1] = arguments[_key3];\n    }\n    var n = e.map(v);\n    m.warn.apply(m, [\"Firestore (\".concat(w, \"): \").concat(t)].concat(_toConsumableArray(n)));\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction v(t) {\n  if (\"string\" == typeof t) return t;\n  try {\n    return e = t, JSON.stringify(e);\n  } catch (e) {\n    // Converting to JSON failed, just log the object directly\n    return t;\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /** Formats an object as a JSON string, suitable for logging. */\n  var e;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction b() {\n  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected state\";\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  var e = \"FIRESTORE (\".concat(w, \") INTERNAL ASSERTION FAILED: \") + t;\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw g(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nfunction E(t, e) {\n  t || b();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nfunction A(t,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar I = \"ok\",\n  T = \"cancelled\",\n  R = \"unknown\",\n  P = \"invalid-argument\",\n  V = \"deadline-exceeded\",\n  $ = \"not-found\",\n  D = \"already-exists\",\n  N = \"permission-denied\",\n  F = \"unauthenticated\",\n  x = \"resource-exhausted\",\n  S = \"failed-precondition\",\n  q = \"aborted\",\n  O = \"out-of-range\",\n  k = \"unimplemented\",\n  C = \"internal\",\n  L = \"unavailable\",\n  M = \"data-loss\";\n\n/** An error returned by a Firestore operation. */\nvar U = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(U, _FirebaseError);\n  /** @hideconstructor */\n  function U(\n  /**\n   * The backend error code associated with this error.\n   */\n  t,\n  /**\n   * A custom error description.\n   */\n  e) {\n    var _this;\n    _classCallCheck(this, U);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(U).call(this, t, e)), _this.code = t, _this.message = e,\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    _this.toString = function () {\n      return \"\".concat(_this.name, \": [code=\").concat(_this.code, \"]: \").concat(_this.message);\n    };\n    return _this;\n  }\n  return U;\n}(FirebaseError);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar j = function j() {\n  var _this2 = this;\n  _classCallCheck(this, j);\n  this.promise = new Promise(function (t, e) {\n    _this2.resolve = t, _this2.reject = e;\n  });\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar B = function B(t, e) {\n  _classCallCheck(this, B);\n  this.user = e, this.type = \"OAuth\", this.headers = new Map(), this.headers.set(\"Authorization\", \"Bearer \".concat(t));\n};\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\nvar z = /*#__PURE__*/function () {\n  function z() {\n    _classCallCheck(this, z);\n  }\n  _createClass(z, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {\n      // Fire with initial user.\n      t.enqueueRetryable(function () {\n        return e(d.UNAUTHENTICATED);\n      });\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }]);\n  return z;\n}();\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\nvar Q = /*#__PURE__*/function () {\n  function Q(t) {\n    _classCallCheck(this, Q);\n    this.token = t,\n    /**\n     * Stores the listener registered with setChangeListener()\n     * This isn't actually necessary since the UID never changes, but we use this\n     * to verify the listen contract is adhered to in tests.\n     */\n    this.changeListener = null;\n  }\n  _createClass(Q, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return Promise.resolve(this.token);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {\n      var _this3 = this;\n      this.changeListener = e,\n      // Fire with initial user.\n      t.enqueueRetryable(function () {\n        return e(_this3.token.user);\n      });\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {\n      this.changeListener = null;\n    }\n  }]);\n  return Q;\n}();\n/** Credential provider for the Lite SDK. */\nvar W = /*#__PURE__*/function () {\n  function W(t) {\n    var _this4 = this;\n    _classCallCheck(this, W);\n    this.auth = null, t.onInit(function (t) {\n      _this4.auth = t;\n    });\n  }\n  _createClass(W, [{\n    key: \"getToken\",\n    value: function getToken() {\n      var _this5 = this;\n      return this.auth ? this.auth.getToken().then(function (t) {\n        return t ? (E(\"string\" == typeof t.accessToken), new B(t.accessToken, new d(_this5.auth.getUid()))) : null;\n      }) : Promise.resolve(null);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {}\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }]);\n  return W;\n}();\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nvar G = /*#__PURE__*/function () {\n  function G(t, e, n, r) {\n    _classCallCheck(this, G);\n    this.t = t, this.i = e, this.o = n, this.u = r, this.type = \"FirstParty\", this.user = d.FIRST_PARTY, this.h = new Map();\n  }\n  /** Gets an authorization token, using a provided factory function, or falling back to First Party GAPI. */\n  _createClass(G, [{\n    key: \"l\",\n    value: function l() {\n      return this.u ? this.u() : (\n      // Make sure this really is a Gapi client.\n      E(!(\"object\" != typeof this.t || null === this.t || !this.t.auth || !this.t.auth.getAuthHeaderValueForFirstParty)), this.t.auth.getAuthHeaderValueForFirstParty([]));\n    }\n  }, {\n    key: \"headers\",\n    get: function get() {\n      this.h.set(\"X-Goog-AuthUser\", this.i);\n      // Use array notation to prevent minification\n      var t = this.l();\n      return t && this.h.set(\"Authorization\", t), this.o && this.h.set(\"X-Goog-Iam-Authorization-Token\", this.o), this.h;\n    }\n  }]);\n  return G;\n}();\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar K = /*#__PURE__*/function () {\n  function K(t, e, n, r) {\n    _classCallCheck(this, K);\n    this.t = t, this.i = e, this.o = n, this.u = r;\n  }\n  _createClass(K, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return Promise.resolve(new G(this.t, this.i, this.o, this.u));\n    }\n  }, {\n    key: \"start\",\n    value: function start(t, e) {\n      // Fire with initial uid.\n      t.enqueueRetryable(function () {\n        return e(d.FIRST_PARTY);\n      });\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }]);\n  return K;\n}();\nvar Y = function Y(t) {\n  _classCallCheck(this, Y);\n  this.value = t, this.type = \"AppCheck\", this.headers = new Map(), t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n};\n/** AppCheck token provider for the Lite SDK. */\nvar H = /*#__PURE__*/function () {\n  function H(t) {\n    var _this6 = this;\n    _classCallCheck(this, H);\n    this.m = t, this.appCheck = null, t.onInit(function (t) {\n      _this6.appCheck = t;\n    });\n  }\n  _createClass(H, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return this.appCheck ? this.appCheck.getToken().then(function (t) {\n        return t ? (E(\"string\" == typeof t.token), new Y(t.token)) : null;\n      }) : Promise.resolve(null);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {}\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }]);\n  return H;\n}();\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Z =\n/**\n * Constructs a DatabaseInfo using the provided host, databaseId and\n * persistenceKey.\n *\n * @param databaseId - The database to use.\n * @param appId - The Firebase App Id.\n * @param persistenceKey - A unique identifier for this Firestore's local\n * storage (used in conjunction with the databaseId).\n * @param host - The Firestore backend host to connect to.\n * @param ssl - Whether to use SSL when connecting.\n * @param forceLongPolling - Whether to use the forceLongPolling option\n * when using WebChannel as the network transport.\n * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n * option when using WebChannel as the network transport.\n * @param useFetchStreams Whether to use the Fetch API instead of\n * XMLHTTPRequest\n */\nfunction Z(t, e, n, r, s, i, o, u) {\n  _classCallCheck(this, Z);\n  this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;\n};\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nvar J = /*#__PURE__*/function () {\n  function J(t, e) {\n    _classCallCheck(this, J);\n    this.projectId = t, this.database = e || \"(default)\";\n  }\n  _createClass(J, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof J && t.projectId === this.projectId && t.database === this.database;\n    }\n  }, {\n    key: \"isDefaultDatabase\",\n    get: function get() {\n      return \"(default)\" === this.database;\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return new J(\"\", \"\");\n    }\n  }]);\n  return J;\n}();\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar X = /*#__PURE__*/function () {\n  function X(t, e, n) {\n    _classCallCheck(this, X);\n    void 0 === e ? e = 0 : e > t.length && b(), void 0 === n ? n = t.length - e : n > t.length - e && b(), this.segments = t, this.offset = e, this.len = n;\n  }\n  _createClass(X, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return 0 === X.comparator(this, t);\n    }\n  }, {\n    key: \"child\",\n    value: function child(t) {\n      var e = this.segments.slice(this.offset, this.limit());\n      return t instanceof X ? t.forEach(function (t) {\n        e.push(t);\n      }) : e.push(t), this.construct(e);\n    } /** The index of one past the last segment of the path. */\n  }, {\n    key: \"limit\",\n    value: function limit() {\n      return this.offset + this.length;\n    }\n  }, {\n    key: \"popFirst\",\n    value: function popFirst(t) {\n      return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n  }, {\n    key: \"popLast\",\n    value: function popLast() {\n      return this.construct(this.segments, this.offset, this.length - 1);\n    }\n  }, {\n    key: \"firstSegment\",\n    value: function firstSegment() {\n      return this.segments[this.offset];\n    }\n  }, {\n    key: \"lastSegment\",\n    value: function lastSegment() {\n      return this.get(this.length - 1);\n    }\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      return this.segments[this.offset + t];\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return 0 === this.length;\n    }\n  }, {\n    key: \"isPrefixOf\",\n    value: function isPrefixOf(t) {\n      if (t.length < this.length) return !1;\n      for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n      return !0;\n    }\n  }, {\n    key: \"isImmediateParentOf\",\n    value: function isImmediateParentOf(t) {\n      if (this.length + 1 !== t.length) return !1;\n      for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n      return !0;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(t) {\n      for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.segments.slice(this.offset, this.limit());\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.len;\n    }\n  }], [{\n    key: \"comparator\",\n    value: function comparator(t, e) {\n      var n = Math.min(t.length, e.length);\n      for (var r = 0; r < n; r++) {\n        var _n2 = t.get(r),\n          s = e.get(r);\n        if (_n2 < s) return -1;\n        if (_n2 > s) return 1;\n      }\n      return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n  }]);\n  return X;\n}();\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\nvar tt = /*#__PURE__*/function (_X) {\n  _inherits(tt, _X);\n  function tt() {\n    _classCallCheck(this, tt);\n    return _possibleConstructorReturn(this, _getPrototypeOf(tt).apply(this, arguments));\n  }\n  _createClass(tt, [{\n    key: \"construct\",\n    value: function construct(t, e, n) {\n      return new tt(t, e, n);\n    }\n  }, {\n    key: \"canonicalString\",\n    value: function canonicalString() {\n      // NOTE: The client is ignorant of any path segments containing escape\n      // sequences (e.g. __id123__) and just passes them through raw (they exist\n      // for legacy reasons and should not be used frequently).\n      return this.toArray().join(\"/\");\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */\n  }], [{\n    key: \"fromString\",\n    value: function fromString() {\n      // NOTE: The client is ignorant of any path segments containing escape\n      // sequences (e.g. __id123__) and just passes them through raw (they exist\n      // for legacy reasons and should not be used frequently).\n      var e = [];\n      for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        t[_key4] = arguments[_key4];\n      }\n      for (var _i = 0, _t2 = t; _i < _t2.length; _i++) {\n        var n = _t2[_i];\n        if (n.indexOf(\"//\") >= 0) throw new U(P, \"Invalid segment (\".concat(n, \"). Paths must not contain // in them.\"));\n        // Strip leading and traling slashed.\n        e.push.apply(e, _toConsumableArray(n.split(\"/\").filter(function (t) {\n          return t.length > 0;\n        })));\n      }\n      return new tt(e);\n    }\n  }, {\n    key: \"emptyPath\",\n    value: function emptyPath() {\n      return new tt([]);\n    }\n  }]);\n  return tt;\n}(X);\nvar et = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\nvar nt = /*#__PURE__*/function (_X2) {\n  _inherits(nt, _X2);\n  function nt() {\n    _classCallCheck(this, nt);\n    return _possibleConstructorReturn(this, _getPrototypeOf(nt).apply(this, arguments));\n  }\n  _createClass(nt, [{\n    key: \"construct\",\n    value: function construct(t, e, n) {\n      return new nt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n  }, {\n    key: \"canonicalString\",\n    value: function canonicalString() {\n      return this.toArray().map(function (t) {\n        return t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), nt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t;\n      }).join(\".\");\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */\n  }, {\n    key: \"isKeyField\",\n    value: function isKeyField() {\n      return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */\n  }], [{\n    key: \"isValidIdentifier\",\n    value: function isValidIdentifier(t) {\n      return et.test(t);\n    }\n  }, {\n    key: \"keyField\",\n    value: function keyField() {\n      return new nt([\"__name__\"]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n  }, {\n    key: \"fromServerFormat\",\n    value: function fromServerFormat(t) {\n      var e = [];\n      var n = \"\",\n        r = 0;\n      var s = function s() {\n        if (0 === n.length) throw new U(P, \"Invalid field path (\".concat(t, \"). Paths must not be empty, begin with '.', end with '.', or contain '..'\"));\n        e.push(n), n = \"\";\n      };\n      var i = !1;\n      for (; r < t.length;) {\n        var _e2 = t[r];\n        if (\"\\\\\" === _e2) {\n          if (r + 1 === t.length) throw new U(P, \"Path has trailing escape character: \" + t);\n          var _e3 = t[r + 1];\n          if (\"\\\\\" !== _e3 && \".\" !== _e3 && \"`\" !== _e3) throw new U(P, \"Path has invalid escape sequence: \" + t);\n          n += _e3, r += 2;\n        } else \"`\" === _e2 ? (i = !i, r++) : \".\" !== _e2 || i ? (n += _e2, r++) : (s(), r++);\n      }\n      if (s(), i) throw new U(P, \"Unterminated ` in path: \" + t);\n      return new nt(e);\n    }\n  }, {\n    key: \"emptyPath\",\n    value: function emptyPath() {\n      return new nt([]);\n    }\n  }]);\n  return nt;\n}(X);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nvar rt = /*#__PURE__*/function () {\n  function rt(t) {\n    _classCallCheck(this, rt);\n    this.path = t;\n  }\n  _createClass(rt, [{\n    key: \"hasCollectionId\",\n    /** Returns true if the document is in the specified collectionId. */value: function hasCollectionId(t) {\n      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    } /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n  }, {\n    key: \"getCollectionGroup\",\n    value: function getCollectionGroup() {\n      return this.path.get(this.path.length - 2);\n    } /** Returns the fully qualified path to the parent collection. */\n  }, {\n    key: \"getCollectionPath\",\n    value: function getCollectionPath() {\n      return this.path.popLast();\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return null !== t && 0 === tt.comparator(this.path, t.path);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.path.toString();\n    }\n  }, {\n    key: \"collectionGroup\",\n    get: function get() {\n      return this.path.popLast().lastSegment();\n    }\n  }], [{\n    key: \"fromPath\",\n    value: function fromPath(t) {\n      return new rt(tt.fromString(t));\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(t) {\n      return new rt(tt.fromString(t).popFirst(5));\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      return new rt(tt.emptyPath());\n    }\n  }, {\n    key: \"comparator\",\n    value: function comparator(t, e) {\n      return tt.comparator(t.path, e.path);\n    }\n  }, {\n    key: \"isDocumentKey\",\n    value: function isDocumentKey(t) {\n      return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */\n  }, {\n    key: \"fromSegments\",\n    value: function fromSegments(t) {\n      return new rt(new tt(t.slice()));\n    }\n  }]);\n  return rt;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction st(t, e, n) {\n  if (!n) throw new U(P, \"Function \".concat(t, \"() cannot be called with an empty \").concat(e, \".\"));\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction it(t) {\n  if (!rt.isDocumentKey(t)) throw new U(P, \"Invalid document reference. Document references must have an even number of segments, but \".concat(t, \" has \").concat(t.length, \".\"));\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nfunction ot(t) {\n  if (rt.isDocumentKey(t)) throw new U(P, \"Invalid collection reference. Collection references must have an odd number of segments, but \".concat(t, \" has \").concat(t.length, \".\"));\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction ut(t) {\n  if (void 0 === t) return \"undefined\";\n  if (null === t) return \"null\";\n  if (\"string\" == typeof t) return t.length > 20 && (t = \"\".concat(t.substring(0, 20), \"...\")), JSON.stringify(t);\n  if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n  if (\"object\" == typeof t) {\n    if (t instanceof Array) return \"an array\";\n    {\n      var e = /** try to get the constructor name for an object. */\n      function (t) {\n        if (t.constructor) return t.constructor.name;\n        return null;\n      }\n      /**\n      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n      * underlying instance. Throws if  `obj` is not an instance of `T`.\n      *\n      * This cast is used in the Lite and Full SDK to verify instance types for\n      * arguments passed to the public API.\n      * @internal\n      */(t);\n      return e ? \"a custom \".concat(e, \" object\") : \"an object\";\n    }\n  }\n  return \"function\" == typeof t ? \"a function\" : b();\n}\nfunction ct(t,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  if (\"_delegate\" in t && (\n  // Unwrap Compat types\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t = t._delegate), !(t instanceof e)) {\n    if (e.name === t.constructor.name) throw new U(P, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n    {\n      var n = ut(t);\n      throw new U(P, \"Expected type '\".concat(e.name, \"', but it was: \").concat(n));\n    }\n  }\n  return t;\n}\nfunction at(t, e) {\n  if (e <= 0) throw new U(P, \"Function \".concat(t, \"() requires a positive number, but it was: \").concat(e, \".\"));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction ht(t) {\n  return null == t;\n}\n\n/** Returns whether the value represents -0. */\nfunction lt(t) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ft = {\n  BatchGetDocuments: \"batchGet\",\n  Commit: \"commit\",\n  RunQuery: \"runQuery\",\n  RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar dt, wt;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction mt(t) {\n  if (void 0 === t) return g(\"RPC_ERROR\", \"HTTP error has no status\"), R;\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (t) {\n    case 200:\n      // OK\n      return I;\n    case 400:\n      // Bad Request\n      return S;\n\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n    case 401:\n      // Unauthorized\n      return F;\n    case 403:\n      // Forbidden\n      return N;\n    case 404:\n      // Not Found\n      return $;\n    case 409:\n      // Conflict\n      return q;\n\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n    case 416:\n      // Range Not Satisfiable\n      return O;\n    case 429:\n      // Too Many Requests\n      return x;\n    case 499:\n      // Client Closed Request\n      return T;\n    case 500:\n      // Internal Server Error\n      return R;\n\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n    case 501:\n      // Unimplemented\n      return k;\n    case 503:\n      // Service Unavailable\n      return L;\n    case 504:\n      // Gateway Timeout\n      return V;\n    default:\n      return t >= 200 && t < 300 ? I : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? C : R;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\n(wt = dt || (dt = {}))[wt.OK = 0] = \"OK\", wt[wt.CANCELLED = 1] = \"CANCELLED\", wt[wt.UNKNOWN = 2] = \"UNKNOWN\", wt[wt.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", wt[wt.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", wt[wt.NOT_FOUND = 5] = \"NOT_FOUND\", wt[wt.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", wt[wt.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", wt[wt.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", wt[wt.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", wt[wt.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", wt[wt.ABORTED = 10] = \"ABORTED\", wt[wt.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", wt[wt.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", wt[wt.INTERNAL = 13] = \"INTERNAL\", wt[wt.UNAVAILABLE = 14] = \"UNAVAILABLE\", wt[wt.DATA_LOSS = 15] = \"DATA_LOSS\";\nvar pt = /*#__PURE__*/function (_ref) {\n  _inherits(pt, _ref);\n  /**\n   * @param databaseInfo - The connection info.\n   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n   */\n  function pt(t, e) {\n    var _this7;\n    _classCallCheck(this, pt);\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(pt).call(this, t)), _this7.V = e;\n    return _this7;\n  }\n  _createClass(pt, [{\n    key: \"$\",\n    value: function $(t, e) {\n      throw new Error(\"Not supported by FetchConnection\");\n    }\n  }, {\n    key: \"R\",\n    value: function () {\n      var _R = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(t, e, n, r) {\n        var s, i, o, _e4, _t3, _e5;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              i = JSON.stringify(r);\n              _context.prev = 1;\n              _context.next = 4;\n              return this.V(e, {\n                method: \"POST\",\n                headers: n,\n                body: i\n              });\n            case 4:\n              o = _context.sent;\n              _context.next = 11;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              _e4 = _context.t0;\n              throw new U(mt(_e4.status), \"Request failed with error: \" + _e4.statusText);\n            case 11:\n              if (o.ok) {\n                _context.next = 18;\n                break;\n              }\n              _context.next = 14;\n              return o.json();\n            case 14:\n              _t3 = _context.sent;\n              Array.isArray(_t3) && (_t3 = _t3[0]);\n              _e5 = null === (s = null == _t3 ? void 0 : _t3.error) || void 0 === s ? void 0 : s.message;\n              throw new U(mt(o.status), \"Request failed with error: \".concat(null != _e5 ? _e5 : o.statusText));\n            case 18:\n              return _context.abrupt(\"return\", o.json());\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n      function R(_x, _x2, _x3, _x4) {\n        return _R.apply(this, arguments);\n      }\n      return R;\n    }()\n  }]);\n  return pt;\n}(\n/*#__PURE__*/\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nfunction () {\n  function _class(t) {\n    _classCallCheck(this, _class);\n    this.databaseInfo = t, this.databaseId = t.databaseId;\n    var e = t.ssl ? \"https\" : \"http\";\n    this.p = e + \"://\" + t.host, this.g = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n  }\n  _createClass(_class, [{\n    key: \"A\",\n    value: function A(t, e, n, r, s) {\n      var i = this.I(t, e);\n      y(\"RestConnection\", \"Sending: \", i, n);\n      var o = {};\n      return this.T(o, r, s), this.R(t, i, o, n).then(function (t) {\n        return y(\"RestConnection\", \"Received: \", t), t;\n      }, function (e) {\n        throw _(\"RestConnection\", \"\".concat(t, \" failed with error: \"), e, \"url: \", i, \"request:\", n), e;\n      });\n    }\n  }, {\n    key: \"P\",\n    value: function P(t, e, n, r, s, i) {\n      // The REST API automatically aggregates all of the streamed results, so we\n      // can just use the normal invoke() method.\n      return this.A(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n  }, {\n    key: \"T\",\n    value: function T(t, e, n) {\n      t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + w,\n      // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the $httpOverwrite\n      // parameter supported by ESF to avoid triggering preflight requests.\n      t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), e && e.headers.forEach(function (e, n) {\n        return t[n] = e;\n      }), n && n.headers.forEach(function (e, n) {\n        return t[n] = e;\n      });\n    }\n  }, {\n    key: \"I\",\n    value: function I(t, e) {\n      var n = ft[t];\n      return \"\".concat(this.p, \"/v1/\").concat(e, \":\").concat(n);\n    }\n  }, {\n    key: \"v\",\n    get: function get() {\n      // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n      // where to run the query, and expect the `request` to NOT specify the \"path\".\n      return !1;\n    }\n  }]);\n  return _class;\n}());\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar yt = /^[_a-zA-Z][_a-zA-Z0-9]*(?:\\.[_a-zA-Z][_a-zA-Z0-9]*)*$/;\n\n/**\n * An alias for aggregation results.\n * @internal\n */\nvar gt = /*#__PURE__*/function () {\n  /**\n   * @internal\n   * @param alias Un-escaped alias representation\n   */\n  function gt(t) {\n    _classCallCheck(this, gt);\n    this.alias = t;\n  }\n  /**\n   * Returns true if the string could be used as an alias.\n   */\n  _createClass(gt, [{\n    key: \"canonicalString\",\n    /**\n     * Return an escaped and quoted string representation of the alias.\n     */\n    value: function canonicalString() {\n      var t = this.alias.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\");\n      return gt.D(t) || (t = \"`\" + t + \"`\"), t;\n    }\n  }], [{\n    key: \"D\",\n    value: function D(t) {\n      return yt.test(t);\n    }\n  }]);\n  return gt;\n}();\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nvar _t = function _t(t, e, n) {\n  _classCallCheck(this, _t);\n  this.alias = t, this.N = e, this.fieldPath = n;\n};\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction vt(t) {\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  var e =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto),\n    n = new Uint8Array(t);\n  if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n);else\n    // Falls back to Math.random\n    for (var _e6 = 0; _e6 < t; _e6++) n[_e6] = Math.floor(256 * Math.random());\n  return n;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bt = /*#__PURE__*/function () {\n  function bt() {\n    _classCallCheck(this, bt);\n  }\n  _createClass(bt, null, [{\n    key: \"F\",\n    value: function F() {\n      // Alphanumeric characters\n      var t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n        e = Math.floor(256 / t.length) * t.length;\n      // The largest byte value that is a multiple of `char.length`.\n      var n = \"\";\n      for (; n.length < 20;) {\n        var r = vt(40);\n        for (var s = 0; s < r.length; ++s)\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n      }\n      return n;\n    }\n  }]);\n  return bt;\n}();\nfunction Et(t, e) {\n  return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */\nfunction At(t, e, n) {\n  return t.length === e.length && t.every(function (t, r) {\n    return n(t, e[r]);\n  });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction It(t) {\n  var e = 0;\n  for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n  return e;\n}\nfunction Tt(t, e) {\n  for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nvar Rt = /*#__PURE__*/function (_Error) {\n  _inherits(Rt, _Error);\n  function Rt() {\n    var _this8;\n    _classCallCheck(this, Rt);\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Rt).apply(this, arguments)), _this8.name = \"Base64DecodeError\";\n    return _this8;\n  }\n  return Rt;\n}(_wrapNativeSuper(Error));\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nvar Pt = /*#__PURE__*/function () {\n  function Pt(t) {\n    _classCallCheck(this, Pt);\n    this.binaryString = t;\n  }\n  _createClass(Pt, [{\n    key: Symbol.iterator,\n    value: function value() {\n      var _this9 = this;\n      var t = 0;\n      return {\n        next: function next() {\n          return t < _this9.binaryString.length ? {\n            value: _this9.binaryString.charCodeAt(t++),\n            done: !1\n          } : {\n            value: void 0,\n            done: !0\n          };\n        }\n      };\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      return t = this.binaryString, btoa(t);\n      var t;\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return function (t) {\n        var e = new Uint8Array(t.length);\n        for (var n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n        return e;\n      }\n      /**\n      * @license\n      * Copyright 2020 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n      // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n      (this.binaryString);\n    }\n  }, {\n    key: \"approximateByteSize\",\n    value: function approximateByteSize() {\n      return 2 * this.binaryString.length;\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(t) {\n      return Et(this.binaryString, t.binaryString);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.binaryString === t.binaryString;\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(t) {\n      var e = function (t) {\n        try {\n          return atob(t);\n        } catch (t) {\n          throw t instanceof DOMException ? new Rt(\"Invalid base64 string: \" + t) : t;\n        }\n      }\n      /** Converts a binary string to a Base64 encoded string. */(t);\n      return new Pt(e);\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(t) {\n      // TODO(indexing); Remove the copy of the byte string here as this method\n      // is frequently called during indexing.\n      var e =\n      /**\n      * Helper function to convert an Uint8array to a binary string.\n      */\n      function (t) {\n        var e = \"\";\n        for (var n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n        return e;\n      }\n      /**\n      * Helper function to convert a binary string to an Uint8Array.\n      */(t);\n      return new Pt(e);\n    }\n  }]);\n  return Pt;\n}();\nPt.EMPTY_BYTE_STRING = new Pt(\"\");\nvar Vt = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nfunction $t(t) {\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (E(!!t), \"string\" == typeof t) {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    var e = 0;\n    var n = Vt.exec(t);\n    if (E(!!n), n[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      var _t4 = n[1];\n      _t4 = (_t4 + \"000000000\").substr(0, 9), e = Number(_t4);\n    }\n    // Parse the date to get the seconds.\n    var r = new Date(t);\n    return {\n      seconds: Math.floor(r.getTime() / 1e3),\n      nanos: e\n    };\n  }\n  return {\n    seconds: Dt(t.seconds),\n    nanos: Dt(t.nanos)\n  };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nfunction Dt(t) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nfunction Nt(t) {\n  return \"string\" == typeof t ? Pt.fromBase64String(t) : Pt.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nvar Ft = /*#__PURE__*/function () {\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  function Ft(\n  /**\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  t,\n  /**\n   * The fractions of a second at nanosecond resolution.*\n   */\n  e) {\n    _classCallCheck(this, Ft);\n    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n    if (e >= 1e9) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n    if (t < -62135596800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n    // This will break in the year 10,000.\n    if (t >= 253402300800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n  }\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n  _createClass(Ft, [{\n    key: \"toDate\",\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n  }, {\n    key: \"_compareTo\",\n    value: function _compareTo(t) {\n      return this.seconds === t.seconds ? Et(this.nanoseconds, t.nanoseconds) : Et(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    } /** Returns a textual representation of this `Timestamp`. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    } /** Returns a JSON-serializable representation of this `Timestamp`. */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        seconds: this.seconds,\n        nanoseconds: this.nanoseconds\n      };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      // This method returns a string of the form <seconds>.<nanoseconds> where\n      // <seconds> is translated to have a non-negative value and both <seconds>\n      // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n      // Strings with this format then have a lexiographical ordering that matches\n      // the expected ordering. The <seconds> translation is done to avoid having\n      // a leading negative sign (i.e. a leading '-' character) in its string\n      // representation, which would affect its lexiographical ordering.\n      var t = this.seconds - -62135596800;\n      // Note: Up to 12 decimal digits are required to represent all valid\n      // 'seconds' values.\n      return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n  }], [{\n    key: \"now\",\n    value: function now() {\n      return Ft.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(t) {\n      return Ft.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(t) {\n      var e = Math.floor(t / 1e3),\n        n = Math.floor(1e6 * (t - 1e3 * e));\n      return new Ft(e, n);\n    }\n  }]);\n  return Ft;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nfunction xt(t) {\n  var e, n;\n  return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nfunction St(t) {\n  var e = t.mapValue.fields.__previous_value__;\n  return xt(e) ? St(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nfunction qt(t) {\n  var e = $t(t.mapValue.fields.__local_write_time__.timestampValue);\n  return new Ft(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Ot = {\n  fields: {\n    __type__: {\n      stringValue: \"__max__\"\n    }\n  }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction kt(t) {\n  return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? xt(t) ? 4 /* TypeOrder.ServerTimestampValue */ : /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n  function (t) {\n    return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n  }\n  /**\n  * @license\n  * Copyright 2022 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /**\n  * Represents a bound of a query.\n  *\n  * The bound is specified with the given components representing a position and\n  * whether it's just before or just after the position (relative to whatever the\n  * query order is).\n  *\n  * The position represents a logical index position for a query. It's a prefix\n  * of values for the (potentially implicit) order by clauses of a query.\n  *\n  * Bound provides a function to determine whether a document comes before or\n  * after a bound. This is influenced by whether the position is just before or\n  * just after the provided values.\n  */(t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : b();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nfunction Ct(t, e) {\n  if (t === e) return !0;\n  var n = kt(t);\n  if (n !== kt(e)) return !1;\n  switch (n) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return !0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return t.booleanValue === e.booleanValue;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return qt(t).isEqual(qt(e));\n    case 3 /* TypeOrder.TimestampValue */:\n      return function (t, e) {\n        if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length)\n          // Use string equality for ISO 8601 timestamps\n          return t.timestampValue === e.timestampValue;\n        var n = $t(t.timestampValue),\n          r = $t(e.timestampValue);\n        return n.seconds === r.seconds && n.nanos === r.nanos;\n      }(t, e);\n    case 5 /* TypeOrder.StringValue */:\n      return t.stringValue === e.stringValue;\n    case 6 /* TypeOrder.BlobValue */:\n      return function (t, e) {\n        return Nt(t.bytesValue).isEqual(Nt(e.bytesValue));\n      }(t, e);\n    case 7 /* TypeOrder.RefValue */:\n      return t.referenceValue === e.referenceValue;\n    case 8 /* TypeOrder.GeoPointValue */:\n      return function (t, e) {\n        return Dt(t.geoPointValue.latitude) === Dt(e.geoPointValue.latitude) && Dt(t.geoPointValue.longitude) === Dt(e.geoPointValue.longitude);\n      }(t, e);\n    case 2 /* TypeOrder.NumberValue */:\n      return function (t, e) {\n        if (\"integerValue\" in t && \"integerValue\" in e) return Dt(t.integerValue) === Dt(e.integerValue);\n        if (\"doubleValue\" in t && \"doubleValue\" in e) {\n          var _n3 = Dt(t.doubleValue),\n            r = Dt(e.doubleValue);\n          return _n3 === r ? lt(_n3) === lt(r) : isNaN(_n3) && isNaN(r);\n        }\n        return !1;\n      }(t, e);\n    case 9 /* TypeOrder.ArrayValue */:\n      return At(t.arrayValue.values || [], e.arrayValue.values || [], Ct);\n    case 10 /* TypeOrder.ObjectValue */:\n      return function (t, e) {\n        var n = t.mapValue.fields || {},\n          r = e.mapValue.fields || {};\n        if (It(n) !== It(r)) return !1;\n        for (var _t5 in n) if (n.hasOwnProperty(_t5) && (void 0 === r[_t5] || !Ct(n[_t5], r[_t5]))) return !1;\n        return !0;\n      }\n      /** Returns true if the ArrayValue contains the specified element. */(t, e);\n    default:\n      return b();\n  }\n}\nfunction Lt(t, e) {\n  return void 0 !== (t.values || []).find(function (t) {\n    return Ct(t, e);\n  });\n}\nfunction Mt(t, e) {\n  if (t === e) return 0;\n  var n = kt(t),\n    r = kt(e);\n  if (n !== r) return Et(n, r);\n  switch (n) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return 0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return Et(t.booleanValue, e.booleanValue);\n    case 2 /* TypeOrder.NumberValue */:\n      return function (t, e) {\n        var n = Dt(t.integerValue || t.doubleValue),\n          r = Dt(e.integerValue || e.doubleValue);\n        return n < r ? -1 : n > r ? 1 : n === r ? 0 :\n        // one or both are NaN.\n        isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n      }(t, e);\n    case 3 /* TypeOrder.TimestampValue */:\n      return Ut(t.timestampValue, e.timestampValue);\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return Ut(qt(t), qt(e));\n    case 5 /* TypeOrder.StringValue */:\n      return Et(t.stringValue, e.stringValue);\n    case 6 /* TypeOrder.BlobValue */:\n      return function (t, e) {\n        var n = Nt(t),\n          r = Nt(e);\n        return n.compareTo(r);\n      }(t.bytesValue, e.bytesValue);\n    case 7 /* TypeOrder.RefValue */:\n      return function (t, e) {\n        var n = t.split(\"/\"),\n          r = e.split(\"/\");\n        for (var _t6 = 0; _t6 < n.length && _t6 < r.length; _t6++) {\n          var _e7 = Et(n[_t6], r[_t6]);\n          if (0 !== _e7) return _e7;\n        }\n        return Et(n.length, r.length);\n      }(t.referenceValue, e.referenceValue);\n    case 8 /* TypeOrder.GeoPointValue */:\n      return function (t, e) {\n        var n = Et(Dt(t.latitude), Dt(e.latitude));\n        if (0 !== n) return n;\n        return Et(Dt(t.longitude), Dt(e.longitude));\n      }(t.geoPointValue, e.geoPointValue);\n    case 9 /* TypeOrder.ArrayValue */:\n      return function (t, e) {\n        var n = t.values || [],\n          r = e.values || [];\n        for (var _t7 = 0; _t7 < n.length && _t7 < r.length; ++_t7) {\n          var _e8 = Mt(n[_t7], r[_t7]);\n          if (_e8) return _e8;\n        }\n        return Et(n.length, r.length);\n      }(t.arrayValue, e.arrayValue);\n    case 10 /* TypeOrder.ObjectValue */:\n      return function (t, e) {\n        if (t === Ot && e === Ot) return 0;\n        if (t === Ot) return 1;\n        if (e === Ot) return -1;\n        var n = t.fields || {},\n          r = Object.keys(n),\n          s = e.fields || {},\n          i = Object.keys(s);\n        // Even though MapValues are likely sorted correctly based on their insertion\n        // order (e.g. when received from the backend), local modifications can bring\n        // elements out of order. We need to re-sort the elements to ensure that\n        // canonical IDs are independent of insertion order.\n        r.sort(), i.sort();\n        for (var _t8 = 0; _t8 < r.length && _t8 < i.length; ++_t8) {\n          var _e9 = Et(r[_t8], i[_t8]);\n          if (0 !== _e9) return _e9;\n          var o = Mt(n[r[_t8]], s[i[_t8]]);\n          if (0 !== o) return o;\n        }\n        return Et(r.length, i.length);\n      }\n      /** Returns a reference value for the provided database and key. */(t.mapValue, e.mapValue);\n    default:\n      throw b();\n  }\n}\nfunction Ut(t, e) {\n  if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return Et(t, e);\n  var n = $t(t),\n    r = $t(e),\n    s = Et(n.seconds, r.seconds);\n  return 0 !== s ? s : Et(n.nanos, r.nanos);\n}\nfunction jt(t, e) {\n  return {\n    referenceValue: \"projects/\".concat(t.projectId, \"/databases/\").concat(t.database, \"/documents/\").concat(e.path.canonicalString())\n  };\n}\n\n/** Returns true if `value` is an ArrayValue. */\nfunction Bt(t) {\n  return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */\nfunction zt(t) {\n  return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */\nfunction Qt(t) {\n  return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nfunction Wt(t) {\n  return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */\nfunction Gt(t) {\n  if (t.geoPointValue) return {\n    geoPointValue: Object.assign({}, t.geoPointValue)\n  };\n  if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n    timestampValue: Object.assign({}, t.timestampValue)\n  };\n  if (t.mapValue) {\n    var e = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    return Tt(t.mapValue.fields, function (t, n) {\n      return e.mapValue.fields[t] = Gt(n);\n    }), e;\n  }\n  if (t.arrayValue) {\n    var _e10 = {\n      arrayValue: {\n        values: []\n      }\n    };\n    for (var n = 0; n < (t.arrayValue.values || []).length; ++n) _e10.arrayValue.values[n] = Gt(t.arrayValue.values[n]);\n    return _e10;\n  }\n  return Object.assign({}, t);\n}\nvar Kt = function Kt(t, e) {\n  _classCallCheck(this, Kt);\n  this.position = t, this.inclusive = e;\n};\nfunction Yt(t, e) {\n  if (null === t) return null === e;\n  if (null === e) return !1;\n  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n  for (var n = 0; n < t.position.length; n++) {\n    if (!Ct(t.position[n], e.position[n])) return !1;\n  }\n  return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Ht = function Ht() {\n  _classCallCheck(this, Ht);\n};\nvar Zt = /*#__PURE__*/function (_Ht) {\n  _inherits(Zt, _Ht);\n  function Zt(t, e, n) {\n    var _this10;\n    _classCallCheck(this, Zt);\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Zt).call(this)), _this10.field = t, _this10.op = e, _this10.value = n;\n    return _this10;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  _createClass(Zt, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = t.data.field(this.field);\n      // Types do not have to match in NOT_EQUAL filters.\n      return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(Mt(e, this.value)) : null !== e && kt(this.value) === kt(e) && this.matchesComparison(Mt(e, this.value));\n      // Only compare types with matching backend order (such as double and int).\n    }\n  }, {\n    key: \"matchesComparison\",\n    value: function matchesComparison(t) {\n      switch (this.op) {\n        case \"<\" /* Operator.LESS_THAN */:\n          return t < 0;\n        case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n          return t <= 0;\n        case \"==\" /* Operator.EQUAL */:\n          return 0 === t;\n        case \"!=\" /* Operator.NOT_EQUAL */:\n          return 0 !== t;\n        case \">\" /* Operator.GREATER_THAN */:\n          return t > 0;\n        case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n          return t >= 0;\n        default:\n          return b();\n      }\n    }\n  }, {\n    key: \"isInequality\",\n    value: function isInequality() {\n      return [\"<\" /* Operator.LESS_THAN */, \"<=\" /* Operator.LESS_THAN_OR_EQUAL */, \">\" /* Operator.GREATER_THAN */, \">=\" /* Operator.GREATER_THAN_OR_EQUAL */, \"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */].indexOf(this.op) >= 0;\n    }\n  }, {\n    key: \"getFlattenedFilters\",\n    value: function getFlattenedFilters() {\n      return [this];\n    }\n  }, {\n    key: \"getFilters\",\n    value: function getFilters() {\n      return [this];\n    }\n  }, {\n    key: \"getFirstInequalityField\",\n    value: function getFirstInequalityField() {\n      return this.isInequality() ? this.field : null;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(t, e, n) {\n      return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, n) : new te(t, e, n) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new se(t, n) : \"in\" /* Operator.IN */ === e ? new ie(t, n) : \"not-in\" /* Operator.NOT_IN */ === e ? new oe(t, n) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new ue(t, n) : new Zt(t, e, n);\n    }\n  }, {\n    key: \"createKeyFieldInFilter\",\n    value: function createKeyFieldInFilter(t, e, n) {\n      return \"in\" /* Operator.IN */ === e ? new ee(t, n) : new ne(t, n);\n    }\n  }]);\n  return Zt;\n}(Ht);\nvar Jt = /*#__PURE__*/function (_Ht2) {\n  _inherits(Jt, _Ht2);\n  function Jt(t, e) {\n    var _this11;\n    _classCallCheck(this, Jt);\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Jt).call(this)), _this11.filters = t, _this11.op = e, _this11.S = null;\n    return _this11;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  _createClass(Jt, [{\n    key: \"matches\",\n    value: function matches(t) {\n      return \"and\" /* CompositeOperator.AND */ === this.op ? void 0 === this.filters.find(function (e) {\n        return !e.matches(t);\n      }) : void 0 !== this.filters.find(function (e) {\n        return e.matches(t);\n      });\n    }\n  }, {\n    key: \"getFlattenedFilters\",\n    value: function getFlattenedFilters() {\n      return null !== this.S || (this.S = this.filters.reduce(function (t, e) {\n        return t.concat(e.getFlattenedFilters());\n      }, [])), this.S;\n    } // Returns a mutable copy of `this.filters`\n  }, {\n    key: \"getFilters\",\n    value: function getFilters() {\n      return Object.assign([], this.filters);\n    }\n  }, {\n    key: \"getFirstInequalityField\",\n    value: function getFirstInequalityField() {\n      var t = this.q(function (t) {\n        return t.isInequality();\n      });\n      return null !== t ? t.field : null;\n    } // Performs a depth-first search to find and return the first FieldFilter in the composite filter\n    // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the\n    // predicate.\n  }, {\n    key: \"q\",\n    value: function q(t) {\n      var _iterator = _createForOfIteratorHelper(this.getFlattenedFilters()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var e = _step.value;\n          if (t(e)) return e;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return null;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(t, e) {\n      return new Jt(t, e);\n    }\n  }]);\n  return Jt;\n}(Ht);\nfunction Xt(t, e) {\n  return t instanceof Zt ? function (t, e) {\n    return e instanceof Zt && t.op === e.op && t.field.isEqual(e.field) && Ct(t.value, e.value);\n  }(t, e) : t instanceof Jt ? function (t, e) {\n    if (e instanceof Jt && t.op === e.op && t.filters.length === e.filters.length) {\n      return t.filters.reduce(function (t, n, r) {\n        return t && Xt(n, e.filters[r]);\n      }, !0);\n    }\n    return !1;\n  }\n  /** Filter that matches on key fields (i.e. '__name__'). */(t, e) : void b();\n}\nvar te = /*#__PURE__*/function (_Zt) {\n  _inherits(te, _Zt);\n  function te(t, e, n) {\n    var _this12;\n    _classCallCheck(this, te);\n    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(te).call(this, t, e, n)), _this12.key = rt.fromName(n.referenceValue);\n    return _this12;\n  }\n  _createClass(te, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = rt.comparator(t.key, this.key);\n      return this.matchesComparison(e);\n    }\n  }]);\n  return te;\n}(Zt);\n/** Filter that matches on key fields within an array. */\nvar ee = /*#__PURE__*/function (_Zt2) {\n  _inherits(ee, _Zt2);\n  function ee(t, e) {\n    var _this13;\n    _classCallCheck(this, ee);\n    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(ee).call(this, t, \"in\" /* Operator.IN */, e)), _this13.keys = re(\"in\" /* Operator.IN */, e);\n    return _this13;\n  }\n  _createClass(ee, [{\n    key: \"matches\",\n    value: function matches(t) {\n      return this.keys.some(function (e) {\n        return e.isEqual(t.key);\n      });\n    }\n  }]);\n  return ee;\n}(Zt);\n/** Filter that matches on key fields not present within an array. */\nvar ne = /*#__PURE__*/function (_Zt3) {\n  _inherits(ne, _Zt3);\n  function ne(t, e) {\n    var _this14;\n    _classCallCheck(this, ne);\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(ne).call(this, t, \"not-in\" /* Operator.NOT_IN */, e)), _this14.keys = re(\"not-in\" /* Operator.NOT_IN */, e);\n    return _this14;\n  }\n  _createClass(ne, [{\n    key: \"matches\",\n    value: function matches(t) {\n      return !this.keys.some(function (e) {\n        return e.isEqual(t.key);\n      });\n    }\n  }]);\n  return ne;\n}(Zt);\nfunction re(t, e) {\n  var n;\n  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(function (t) {\n    return rt.fromName(t.referenceValue);\n  });\n}\n\n/** A Filter that implements the array-contains operator. */\nvar se = /*#__PURE__*/function (_Zt4) {\n  _inherits(se, _Zt4);\n  function se(t, e) {\n    _classCallCheck(this, se);\n    return _possibleConstructorReturn(this, _getPrototypeOf(se).call(this, t, \"array-contains\" /* Operator.ARRAY_CONTAINS */, e));\n  }\n  _createClass(se, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = t.data.field(this.field);\n      return Bt(e) && Lt(e.arrayValue, this.value);\n    }\n  }]);\n  return se;\n}(Zt);\n/** A Filter that implements the IN operator. */\nvar ie = /*#__PURE__*/function (_Zt5) {\n  _inherits(ie, _Zt5);\n  function ie(t, e) {\n    _classCallCheck(this, ie);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ie).call(this, t, \"in\" /* Operator.IN */, e));\n  }\n  _createClass(ie, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = t.data.field(this.field);\n      return null !== e && Lt(this.value.arrayValue, e);\n    }\n  }]);\n  return ie;\n}(Zt);\n/** A Filter that implements the not-in operator. */\nvar oe = /*#__PURE__*/function (_Zt6) {\n  _inherits(oe, _Zt6);\n  function oe(t, e) {\n    _classCallCheck(this, oe);\n    return _possibleConstructorReturn(this, _getPrototypeOf(oe).call(this, t, \"not-in\" /* Operator.NOT_IN */, e));\n  }\n  _createClass(oe, [{\n    key: \"matches\",\n    value: function matches(t) {\n      if (Lt(this.value.arrayValue, {\n        nullValue: \"NULL_VALUE\"\n      })) return !1;\n      var e = t.data.field(this.field);\n      return null !== e && !Lt(this.value.arrayValue, e);\n    }\n  }]);\n  return oe;\n}(Zt);\n/** A Filter that implements the array-contains-any operator. */\nvar ue = /*#__PURE__*/function (_Zt7) {\n  _inherits(ue, _Zt7);\n  function ue(t, e) {\n    _classCallCheck(this, ue);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ue).call(this, t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, e));\n  }\n  _createClass(ue, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var _this15 = this;\n      var e = t.data.field(this.field);\n      return !(!Bt(e) || !e.arrayValue.values) && e.arrayValue.values.some(function (t) {\n        return Lt(_this15.value.arrayValue, t);\n      });\n    }\n  }]);\n  return ue;\n}(Zt);\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar ce = function ce(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"asc\";\n  _classCallCheck(this, ce);\n  this.field = t, this.dir = e;\n};\nfunction ae(t, e) {\n  return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar he = /*#__PURE__*/function () {\n  function he(t) {\n    _classCallCheck(this, he);\n    this.timestamp = t;\n  }\n  _createClass(he, [{\n    key: \"compareTo\",\n    value: function compareTo(t) {\n      return this.timestamp._compareTo(t.timestamp);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.timestamp.isEqual(t.timestamp);\n    } /** Returns a number representation of the version for use in spec tests. */\n  }, {\n    key: \"toMicroseconds\",\n    value: function toMicroseconds() {\n      // Convert to microseconds.\n      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n  }, {\n    key: \"toTimestamp\",\n    value: function toTimestamp() {\n      return this.timestamp;\n    }\n  }], [{\n    key: \"fromTimestamp\",\n    value: function fromTimestamp(t) {\n      return new he(t);\n    }\n  }, {\n    key: \"min\",\n    value: function min() {\n      return new he(new Ft(0, 0));\n    }\n  }, {\n    key: \"max\",\n    value: function max() {\n      return new he(new Ft(253402300799, 999999999));\n    }\n  }]);\n  return he;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar le = /*#__PURE__*/function () {\n  function le(t, e) {\n    _classCallCheck(this, le);\n    this.comparator = t, this.root = e || de.EMPTY;\n  }\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  _createClass(le, [{\n    key: \"insert\",\n    value: function insert(t, e) {\n      return new le(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, de.BLACK, null, null));\n    } // Returns a copy of the map, with the specified key removed.\n  }, {\n    key: \"remove\",\n    value: function remove(t) {\n      return new le(this.comparator, this.root.remove(t, this.comparator).copy(null, null, de.BLACK, null, null));\n    } // Returns the value of the node with the given key, or null.\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      var e = this.root;\n      for (; !e.isEmpty();) {\n        var n = this.comparator(t, e.key);\n        if (0 === n) return e.value;\n        n < 0 ? e = e.left : n > 0 && (e = e.right);\n      }\n      return null;\n    } // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(t) {\n      // Number of nodes that were pruned when descending right\n      var e = 0,\n        n = this.root;\n      for (; !n.isEmpty();) {\n        var r = this.comparator(t, n.key);\n        if (0 === r) return e + n.left.size;\n        r < 0 ? n = n.left : (\n        // Count all nodes left of the node plus the node itself\n        e += n.left.size + 1, n = n.right);\n      }\n      // Node not found\n      return -1;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.root.isEmpty();\n    } // Returns the total number of nodes in the map.\n  }, {\n    key: \"minKey\",\n    // Returns the minimum key in the map.\n    value: function minKey() {\n      return this.root.minKey();\n    } // Returns the maximum key in the map.\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return this.root.maxKey();\n    } // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(t) {\n      return this.root.inorderTraversal(t);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(t) {\n      this.inorderTraversal(function (e, n) {\n        return t(e, n), !1;\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var t = [];\n      return this.inorderTraversal(function (e, n) {\n        return t.push(\"\".concat(e, \":\").concat(n)), !1;\n      }), \"{\".concat(t.join(\", \"), \"}\");\n    } // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(t) {\n      return this.root.reverseTraversal(t);\n    } // Returns an iterator over the SortedMap.\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      return new fe(this.root, null, this.comparator, !1);\n    }\n  }, {\n    key: \"getIteratorFrom\",\n    value: function getIteratorFrom(t) {\n      return new fe(this.root, t, this.comparator, !1);\n    }\n  }, {\n    key: \"getReverseIterator\",\n    value: function getReverseIterator() {\n      return new fe(this.root, null, this.comparator, !0);\n    }\n  }, {\n    key: \"getReverseIteratorFrom\",\n    value: function getReverseIteratorFrom(t) {\n      return new fe(this.root, t, this.comparator, !0);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.root.size;\n    }\n  }]);\n  return le;\n}(); // end SortedMap\n// An iterator over an LLRBNode.\nvar fe = /*#__PURE__*/function () {\n  function fe(t, e, n, r) {\n    _classCallCheck(this, fe);\n    this.isReverse = r, this.nodeStack = [];\n    var s = 1;\n    for (; !t.isEmpty();) if (s = e ? n(t.key, e) : 1,\n    // flip the comparison if we're going in reverse\n    e && r && (s *= -1), s < 0)\n      // This node is less than our start key. ignore it\n      t = this.isReverse ? t.left : t.right;else {\n      if (0 === s) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(t);\n        break;\n      }\n      // This node is greater than our start key, add it to the stack and move\n      // to the next one\n      this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n    }\n  }\n  _createClass(fe, [{\n    key: \"getNext\",\n    value: function getNext() {\n      var t = this.nodeStack.pop();\n      var e = {\n        key: t.key,\n        value: t.value\n      };\n      if (this.isReverse) for (t = t.left; !t.isEmpty();) this.nodeStack.push(t), t = t.right;else for (t = t.right; !t.isEmpty();) this.nodeStack.push(t), t = t.left;\n      return e;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this.nodeStack.length > 0;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      if (0 === this.nodeStack.length) return null;\n      var t = this.nodeStack[this.nodeStack.length - 1];\n      return {\n        key: t.key,\n        value: t.value\n      };\n    }\n  }]);\n  return fe;\n}(); // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nvar de = /*#__PURE__*/function () {\n  function de(t, e, n, r, s) {\n    _classCallCheck(this, de);\n    this.key = t, this.value = e, this.color = null != n ? n : de.RED, this.left = null != r ? r : de.EMPTY, this.right = null != s ? s : de.EMPTY, this.size = this.left.size + 1 + this.right.size;\n  }\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  _createClass(de, [{\n    key: \"copy\",\n    value: function copy(t, e, n, r, s) {\n      return new de(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !1;\n    } // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(t) {\n      return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    } // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(t) {\n      return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    } // Returns the minimum node in the tree.\n  }, {\n    key: \"min\",\n    value: function min() {\n      return this.left.isEmpty() ? this : this.left.min();\n    } // Returns the maximum key in the tree.\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return this.min().key;\n    } // Returns the maximum key in the tree.\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return this.right.isEmpty() ? this.key : this.right.maxKey();\n    } // Returns new tree, with the key/value added.\n  }, {\n    key: \"insert\",\n    value: function insert(t, e, n) {\n      var r = this;\n      var s = n(t, r.key);\n      return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), r.fixUp();\n    }\n  }, {\n    key: \"removeMin\",\n    value: function removeMin() {\n      if (this.left.isEmpty()) return de.EMPTY;\n      var t = this;\n      return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();\n    } // Returns new tree, with the specified item removed.\n  }, {\n    key: \"remove\",\n    value: function remove(t, e) {\n      var n,\n        r = this;\n      if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), r = r.copy(null, null, null, r.left.remove(t, e), null);else {\n        if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), 0 === e(t, r.key)) {\n          if (r.right.isEmpty()) return de.EMPTY;\n          n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n        }\n        r = r.copy(null, null, null, null, r.right.remove(t, e));\n      }\n      return r.fixUp();\n    }\n  }, {\n    key: \"isRed\",\n    value: function isRed() {\n      return this.color;\n    } // Returns new tree after performing any needed rotations.\n  }, {\n    key: \"fixUp\",\n    value: function fixUp() {\n      var t = this;\n      return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n  }, {\n    key: \"moveRedLeft\",\n    value: function moveRedLeft() {\n      var t = this.colorFlip();\n      return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n  }, {\n    key: \"moveRedRight\",\n    value: function moveRedRight() {\n      var t = this.colorFlip();\n      return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var t = this.copy(null, null, de.RED, null, this.right.left);\n      return this.right.copy(null, null, this.color, t, null);\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var t = this.copy(null, null, de.RED, this.left.right, null);\n      return this.left.copy(null, null, this.color, null, t);\n    }\n  }, {\n    key: \"colorFlip\",\n    value: function colorFlip() {\n      var t = this.left.copy(null, null, !this.left.color, null, null),\n        e = this.right.copy(null, null, !this.right.color, null, null);\n      return this.copy(null, null, !this.color, t, e);\n    } // For testing.\n  }, {\n    key: \"checkMaxDepth\",\n    value: function checkMaxDepth() {\n      var t = this.check();\n      return Math.pow(2, t) <= this.size + 1;\n    } // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (this.isRed() && this.left.isRed()) throw b();\n      if (this.right.isRed()) throw b();\n      var t = this.left.check();\n      if (t !== this.right.check()) throw b();\n      return t + (this.isRed() ? 0 : 1);\n    }\n  }]);\n  return de;\n}(); // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nde.EMPTY = null, de.RED = !0, de.BLACK = !1;\n\n// end LLRBEmptyNode\nde.EMPTY = new (\n/*#__PURE__*/\n// Represents an empty node (a leaf node in the Red-Black Tree).\nfunction () {\n  function _class2() {\n    _classCallCheck(this, _class2);\n    this.size = 0;\n  }\n  _createClass(_class2, [{\n    key: \"copy\",\n    // Returns a copy of the current node.\n    value: function copy(t, e, n, r, s) {\n      return this;\n    } // Returns a copy of the tree, with the specified key/value added.\n  }, {\n    key: \"insert\",\n    value: function insert(t, e, n) {\n      return new de(t, e);\n    } // Returns a copy of the tree, with the specified key removed.\n  }, {\n    key: \"remove\",\n    value: function remove(t, e) {\n      return this;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !0;\n    }\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(t) {\n      return !1;\n    }\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(t) {\n      return !1;\n    }\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return null;\n    }\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return null;\n    }\n  }, {\n    key: \"isRed\",\n    value: function isRed() {\n      return !1;\n    } // For testing.\n  }, {\n    key: \"checkMaxDepth\",\n    value: function checkMaxDepth() {\n      return !0;\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      return 0;\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      throw b();\n    }\n  }]);\n  return _class2;\n}())();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar we = /*#__PURE__*/function () {\n  function we(t) {\n    _classCallCheck(this, we);\n    this.comparator = t, this.data = new le(this.comparator);\n  }\n  _createClass(we, [{\n    key: \"has\",\n    value: function has(t) {\n      return null !== this.data.get(t);\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.data.minKey();\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      return this.data.maxKey();\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(t) {\n      return this.data.indexOf(t);\n    } /** Iterates elements in order defined by \"comparator\" */\n  }, {\n    key: \"forEach\",\n    value: function forEach(t) {\n      this.data.inorderTraversal(function (e, n) {\n        return t(e), !1;\n      });\n    } /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n  }, {\n    key: \"forEachInRange\",\n    value: function forEachInRange(t, e) {\n      var n = this.data.getIteratorFrom(t[0]);\n      for (; n.hasNext();) {\n        var r = n.getNext();\n        if (this.comparator(r.key, t[1]) >= 0) return;\n        e(r.key);\n      }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */\n  }, {\n    key: \"forEachWhile\",\n    value: function forEachWhile(t, e) {\n      var n;\n      for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();) {\n        if (!t(n.getNext().key)) return;\n      }\n    } /** Finds the least element greater than or equal to `elem`. */\n  }, {\n    key: \"firstAfterOrEqual\",\n    value: function firstAfterOrEqual(t) {\n      var e = this.data.getIteratorFrom(t);\n      return e.hasNext() ? e.getNext().key : null;\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      return new me(this.data.getIterator());\n    }\n  }, {\n    key: \"getIteratorFrom\",\n    value: function getIteratorFrom(t) {\n      return new me(this.data.getIteratorFrom(t));\n    } /** Inserts or updates an element */\n  }, {\n    key: \"add\",\n    value: function add(t) {\n      return this.copy(this.data.remove(t).insert(t, !0));\n    } /** Deletes an element */\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.data.isEmpty();\n    }\n  }, {\n    key: \"unionWith\",\n    value: function unionWith(t) {\n      var e = this;\n      // Make sure `result` always refers to the larger one of the two sets.\n      return e.size < t.size && (e = t, t = this), t.forEach(function (t) {\n        e = e.add(t);\n      }), e;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      if (!(t instanceof we)) return !1;\n      if (this.size !== t.size) return !1;\n      var e = this.data.getIterator(),\n        n = t.data.getIterator();\n      for (; e.hasNext();) {\n        var _t9 = e.getNext().key,\n          r = n.getNext().key;\n        if (0 !== this.comparator(_t9, r)) return !1;\n      }\n      return !0;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var t = [];\n      return this.forEach(function (e) {\n        t.push(e);\n      }), t;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var t = [];\n      return this.forEach(function (e) {\n        return t.push(e);\n      }), \"SortedSet(\" + t.toString() + \")\";\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(t) {\n      var e = new we(this.comparator);\n      return e.data = t, e;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.data.size;\n    }\n  }]);\n  return we;\n}();\nvar me = /*#__PURE__*/function () {\n  function me(t) {\n    _classCallCheck(this, me);\n    this.iter = t;\n  }\n  _createClass(me, [{\n    key: \"getNext\",\n    value: function getNext() {\n      return this.iter.getNext().key;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this.iter.hasNext();\n    }\n  }]);\n  return me;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar pe = /*#__PURE__*/function () {\n  function pe(t) {\n    _classCallCheck(this, pe);\n    this.fields = t,\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    t.sort(nt.comparator);\n  }\n  _createClass(pe, [{\n    key: \"unionWith\",\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */\n    value: function unionWith(t) {\n      var e = new we(nt.comparator);\n      var _iterator2 = _createForOfIteratorHelper(this.fields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _t10 = _step2.value;\n          e = e.add(_t10);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(t),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var n = _step3.value;\n          e = e.add(n);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return new pe(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */\n  }, {\n    key: \"covers\",\n    value: function covers(t) {\n      var _iterator4 = _createForOfIteratorHelper(this.fields),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var e = _step4.value;\n          if (e.isPrefixOf(t)) return !0;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return !1;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return At(this.fields, t.fields, function (t, e) {\n        return t.isEqual(e);\n      });\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return new pe([]);\n    }\n  }]);\n  return pe;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nvar ye = /*#__PURE__*/function () {\n  function ye(t) {\n    _classCallCheck(this, ye);\n    this.value = t;\n  }\n  _createClass(ye, [{\n    key: \"field\",\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */\n    value: function field(t) {\n      if (t.isEmpty()) return this.value;\n      {\n        var e = this.value;\n        for (var n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], !Wt(e)) return null;\n        return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n      }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */\n  }, {\n    key: \"set\",\n    value: function set(t, e) {\n      this.getFieldsMap(t.popLast())[t.lastSegment()] = Gt(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */\n  }, {\n    key: \"setAll\",\n    value: function setAll(t) {\n      var _this16 = this;\n      var e = nt.emptyPath(),\n        n = {},\n        r = [];\n      t.forEach(function (t, s) {\n        if (!e.isImmediateParentOf(s)) {\n          // Insert the accumulated changes at this parent location\n          var _t11 = _this16.getFieldsMap(e);\n          _this16.applyChanges(_t11, n, r), n = {}, r = [], e = s.popLast();\n        }\n        t ? n[s.lastSegment()] = Gt(t) : r.push(s.lastSegment());\n      });\n      var s = this.getFieldsMap(e);\n      this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      var e = this.field(t.popLast());\n      Wt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return Ct(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */\n  }, {\n    key: \"getFieldsMap\",\n    value: function getFieldsMap(t) {\n      var e = this.value;\n      e.mapValue.fields || (e.mapValue = {\n        fields: {}\n      });\n      for (var n = 0; n < t.length; ++n) {\n        var r = e.mapValue.fields[t.get(n)];\n        Wt(r) && r.mapValue.fields || (r = {\n          mapValue: {\n            fields: {}\n          }\n        }, e.mapValue.fields[t.get(n)] = r), e = r;\n      }\n      return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges(t, e, n) {\n      Tt(e, function (e, n) {\n        return t[e] = n;\n      });\n      var _iterator5 = _createForOfIteratorHelper(n),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _e11 = _step5.value;\n          delete t[_e11];\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ye(Gt(this.value));\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return new ye({\n        mapValue: {}\n      });\n    }\n  }]);\n  return ye;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\nvar ge = /*#__PURE__*/function () {\n  function ge(t, e, n, r, s, i, o) {\n    _classCallCheck(this, ge);\n    this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.createTime = s, this.data = i, this.documentState = o;\n  }\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n  _createClass(ge, [{\n    key: \"convertToFoundDocument\",\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */\n    value: function convertToFoundDocument(t, e) {\n      // If a document is switching state from being an invalid or deleted\n      // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n      // update from Watch or due to applying a local set mutation on top\n      // of a deleted document, our best guess about its createTime would be the\n      // version at which the document transitioned to a FOUND_DOCUMENT.\n      return !this.createTime.isEqual(he.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */, this.data = e, this.documentState = 0 /* DocumentState.SYNCED */, this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */\n  }, {\n    key: \"convertToNoDocument\",\n    value: function convertToNoDocument(t) {\n      return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */, this.data = ye.empty(), this.documentState = 0 /* DocumentState.SYNCED */, this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */\n  }, {\n    key: \"convertToUnknownDocument\",\n    value: function convertToUnknownDocument(t) {\n      return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */, this.data = ye.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */, this;\n    }\n  }, {\n    key: \"setHasCommittedMutations\",\n    value: function setHasCommittedMutations() {\n      return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */, this;\n    }\n  }, {\n    key: \"setHasLocalMutations\",\n    value: function setHasLocalMutations() {\n      return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */, this.version = he.min(), this;\n    }\n  }, {\n    key: \"setReadTime\",\n    value: function setReadTime(t) {\n      return this.readTime = t, this;\n    }\n  }, {\n    key: \"isValidDocument\",\n    value: function isValidDocument() {\n      return 0 /* DocumentType.INVALID */ !== this.documentType;\n    }\n  }, {\n    key: \"isFoundDocument\",\n    value: function isFoundDocument() {\n      return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n    }\n  }, {\n    key: \"isNoDocument\",\n    value: function isNoDocument() {\n      return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n    }\n  }, {\n    key: \"isUnknownDocument\",\n    value: function isUnknownDocument() {\n      return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof ge && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n  }, {\n    key: \"mutableCopy\",\n    value: function mutableCopy() {\n      return new ge(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Document(\".concat(this.key, \", \").concat(this.version, \", \").concat(JSON.stringify(this.data.value), \", {createTime: \").concat(this.createTime, \"}), {documentType: \").concat(this.documentType, \"}), {documentState: \").concat(this.documentState, \"})\");\n    }\n  }, {\n    key: \"hasLocalMutations\",\n    get: function get() {\n      return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n  }, {\n    key: \"hasCommittedMutations\",\n    get: function get() {\n      return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n  }, {\n    key: \"hasPendingWrites\",\n    get: function get() {\n      return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n  }], [{\n    key: \"newInvalidDocument\",\n    value: function newInvalidDocument(t) {\n      return new ge(t, 0 /* DocumentType.INVALID */, /* version */he.min(), /* readTime */he.min(), /* createTime */he.min(), ye.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */\n  }, {\n    key: \"newFoundDocument\",\n    value: function newFoundDocument(t, e, n, r) {\n      return new ge(t, 1 /* DocumentType.FOUND_DOCUMENT */, /* version */e, /* readTime */he.min(), /* createTime */n, r, 0 /* DocumentState.SYNCED */);\n    } /** Creates a new document that is known to not exist at the given version. */\n  }, {\n    key: \"newNoDocument\",\n    value: function newNoDocument(t, e) {\n      return new ge(t, 2 /* DocumentType.NO_DOCUMENT */, /* version */e, /* readTime */he.min(), /* createTime */he.min(), ye.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */\n  }, {\n    key: \"newUnknownDocument\",\n    value: function newUnknownDocument(t, e) {\n      return new ge(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */, /* version */e, /* readTime */he.min(), /* createTime */he.min(), ye.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n    }\n  }]);\n  return ge;\n}();\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nvar _e = function _e(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  _classCallCheck(this, _e);\n  this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, this.startAt = i, this.endAt = o, this.O = null;\n};\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nfunction ve(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  return new _e(t, e, n, r, s, i, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nvar be =\n/**\n * Initializes a Query with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n */\nfunction be(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"F\";\n  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  var u = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  _classCallCheck(this, be);\n  this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.k = null,\n  // The corresponding `Target` of this `Query` instance.\n  this.C = null, this.startAt, this.endAt;\n};\n/** Creates a new Query for a query that matches all documents at `path` */\nfunction Ee(t) {\n  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\nfunction Ae(t) {\n  var _iterator6 = _createForOfIteratorHelper(t.filters),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var e = _step6.value;\n      var _t12 = e.getFirstInequalityField();\n      if (null !== _t12) return _t12;\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return null;\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction Ie(t) {\n  return null !== t.collectionGroup;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */\nfunction Te(t) {\n  var e = A(t);\n  if (null === e.k) {\n    e.k = [];\n    var _t13 = Ae(e),\n      n = Ee(e);\n    if (null !== _t13 && null === n)\n      // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      _t13.isKeyField() || e.k.push(new ce(_t13)), e.k.push(new ce(nt.keyField(), \"asc\" /* Direction.ASCENDING */));else {\n      var _t14 = !1;\n      var _iterator7 = _createForOfIteratorHelper(e.explicitOrderBy),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _n4 = _step7.value;\n          e.k.push(_n4), _n4.field.isKeyField() && (_t14 = !0);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      if (!_t14) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        var _t15 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */;\n        e.k.push(new ce(nt.keyField(), _t15));\n      }\n    }\n  }\n  return e.k;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */\nfunction Re(t) {\n  var e = A(t);\n  if (!e.C) if (\"F\" /* LimitType.First */ === e.limitType) e.C = ve(e.path, e.collectionGroup, Te(e), e.filters, e.limit, e.startAt, e.endAt);else {\n    // Flip the orderBy directions since we want the last results\n    var _t16 = [];\n    var _iterator8 = _createForOfIteratorHelper(Te(e)),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var _n5 = _step8.value;\n        var _e12 = \"desc\" /* Direction.DESCENDING */ === _n5.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n        _t16.push(new ce(_n5.field, _e12));\n      }\n      // We need to swap the cursors to match the now-flipped query ordering.\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    var n = e.endAt ? new Kt(e.endAt.position, e.endAt.inclusive) : null,\n      r = e.startAt ? new Kt(e.startAt.position, e.startAt.inclusive) : null;\n    // Now return as a LimitType.First query.\n    e.C = ve(e.path, e.collectionGroup, _t16, e.filters, e.limit, n, r);\n  }\n  return e.C;\n}\nfunction Pe(t, e) {\n  e.getFirstInequalityField(), Ae(t);\n  var n = t.filters.concat([e]);\n  return new be(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n}\nfunction Ve(t, e) {\n  return function (t, e) {\n    if (t.limit !== e.limit) return !1;\n    if (t.orderBy.length !== e.orderBy.length) return !1;\n    for (var n = 0; n < t.orderBy.length; n++) if (!ae(t.orderBy[n], e.orderBy[n])) return !1;\n    if (t.filters.length !== e.filters.length) return !1;\n    for (var _n6 = 0; _n6 < t.filters.length; _n6++) if (!Xt(t.filters[_n6], e.filters[_n6])) return !1;\n    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Yt(t.startAt, e.startAt) && Yt(t.endAt, e.endAt);\n  }(Re(t), Re(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction $e(t, e) {\n  return function (t) {\n    return \"number\" == typeof t && Number.isInteger(t) && !lt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n  }(e) ?\n  /**\n  * Returns an IntegerValue for `value`.\n  */\n  function (t) {\n    return {\n      integerValue: \"\" + t\n    };\n  }(e) : function (t, e) {\n    if (t.L) {\n      if (isNaN(e)) return {\n        doubleValue: \"NaN\"\n      };\n      if (e === 1 / 0) return {\n        doubleValue: \"Infinity\"\n      };\n      if (e === -1 / 0) return {\n        doubleValue: \"-Infinity\"\n      };\n    }\n    return {\n      doubleValue: lt(e) ? \"-0\" : e\n    };\n  }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */\nvar De = function De() {\n  _classCallCheck(this, De);\n  // Make sure that the structural type of `TransformOperation` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  this._ = void 0;\n};\n/** Transforms a value into a server-generated timestamp. */\nvar Ne = /*#__PURE__*/function (_De) {\n  _inherits(Ne, _De);\n  function Ne() {\n    _classCallCheck(this, Ne);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ne).apply(this, arguments));\n  }\n  return Ne;\n}(De);\n/** Transforms an array value via a union operation. */\nvar Fe = /*#__PURE__*/function (_De2) {\n  _inherits(Fe, _De2);\n  function Fe(t) {\n    var _this17;\n    _classCallCheck(this, Fe);\n    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(Fe).call(this)), _this17.elements = t;\n    return _this17;\n  }\n  return Fe;\n}(De);\n/** Transforms an array value via a remove operation. */\nvar xe = /*#__PURE__*/function (_De3) {\n  _inherits(xe, _De3);\n  function xe(t) {\n    var _this18;\n    _classCallCheck(this, xe);\n    _this18 = _possibleConstructorReturn(this, _getPrototypeOf(xe).call(this)), _this18.elements = t;\n    return _this18;\n  }\n  return xe;\n}(De);\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nvar Se = /*#__PURE__*/function (_De4) {\n  _inherits(Se, _De4);\n  function Se(t, e) {\n    var _this19;\n    _classCallCheck(this, Se);\n    _this19 = _possibleConstructorReturn(this, _getPrototypeOf(Se).call(this)), _this19.M = t, _this19.U = e;\n    return _this19;\n  }\n  return Se;\n}(De);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */\nvar qe = function qe(t, e) {\n  _classCallCheck(this, qe);\n  this.field = t, this.transform = e;\n};\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Oe = /*#__PURE__*/function () {\n  function Oe(t, e) {\n    _classCallCheck(this, Oe);\n    this.updateTime = t, this.exists = e;\n  }\n  /** Creates a new empty Precondition. */\n  _createClass(Oe, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n  }, {\n    key: \"isNone\",\n    /** Returns whether this Precondition is empty. */get: function get() {\n      return void 0 === this.updateTime && void 0 === this.exists;\n    }\n  }], [{\n    key: \"none\",\n    value: function none() {\n      return new Oe();\n    } /** Creates a new Precondition with an exists flag. */\n  }, {\n    key: \"exists\",\n    value: function exists(t) {\n      return new Oe(void 0, t);\n    } /** Creates a new Precondition based on a version a document exists at. */\n  }, {\n    key: \"updateTime\",\n    value: function updateTime(t) {\n      return new Oe(t);\n    }\n  }]);\n  return Oe;\n}();\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\nvar ke = function ke() {\n  _classCallCheck(this, ke);\n};\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar Ce = /*#__PURE__*/function (_ke) {\n  _inherits(Ce, _ke);\n  function Ce(t, e, n) {\n    var _this20;\n    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    _classCallCheck(this, Ce);\n    _this20 = _possibleConstructorReturn(this, _getPrototypeOf(Ce).call(this)), _this20.key = t, _this20.value = e, _this20.precondition = n, _this20.fieldTransforms = r, _this20.type = 0 /* MutationType.Set */;\n    return _this20;\n  }\n  _createClass(Ce, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return null;\n    }\n  }]);\n  return Ce;\n}(ke);\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar Le = /*#__PURE__*/function (_ke2) {\n  _inherits(Le, _ke2);\n  function Le(t, e, n, r) {\n    var _this21;\n    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    _classCallCheck(this, Le);\n    _this21 = _possibleConstructorReturn(this, _getPrototypeOf(Le).call(this)), _this21.key = t, _this21.data = e, _this21.fieldMask = n, _this21.precondition = r, _this21.fieldTransforms = s, _this21.type = 1 /* MutationType.Patch */;\n    return _this21;\n  }\n  _createClass(Le, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return this.fieldMask;\n    }\n  }]);\n  return Le;\n}(ke);\n/** A mutation that deletes the document at the given key. */\nvar Me = /*#__PURE__*/function (_ke3) {\n  _inherits(Me, _ke3);\n  function Me(t, e) {\n    var _this22;\n    _classCallCheck(this, Me);\n    _this22 = _possibleConstructorReturn(this, _getPrototypeOf(Me).call(this)), _this22.key = t, _this22.precondition = e, _this22.type = 2 /* MutationType.Delete */, _this22.fieldTransforms = [];\n    return _this22;\n  }\n  _createClass(Me, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return null;\n    }\n  }]);\n  return Me;\n}(ke);\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nvar Ue = /*#__PURE__*/function (_ke4) {\n  _inherits(Ue, _ke4);\n  function Ue(t, e) {\n    var _this23;\n    _classCallCheck(this, Ue);\n    _this23 = _possibleConstructorReturn(this, _getPrototypeOf(Ue).call(this)), _this23.key = t, _this23.precondition = e, _this23.type = 3 /* MutationType.Verify */, _this23.fieldTransforms = [];\n    return _this23;\n  }\n  _createClass(Ue, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return null;\n    }\n  }]);\n  return Ue;\n}(ke);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar je = function () {\n    var t = {\n      asc: \"ASCENDING\",\n      desc: \"DESCENDING\"\n    };\n    return t;\n  }(),\n  Be = function () {\n    var t = {\n      \"<\": \"LESS_THAN\",\n      \"<=\": \"LESS_THAN_OR_EQUAL\",\n      \">\": \"GREATER_THAN\",\n      \">=\": \"GREATER_THAN_OR_EQUAL\",\n      \"==\": \"EQUAL\",\n      \"!=\": \"NOT_EQUAL\",\n      \"array-contains\": \"ARRAY_CONTAINS\",\n      in: \"IN\",\n      \"not-in\": \"NOT_IN\",\n      \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n  }(),\n  ze = function () {\n    var t = {\n      and: \"AND\",\n      or: \"OR\"\n    };\n    return t;\n  }();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar Qe = function Qe(t, e) {\n  _classCallCheck(this, Qe);\n  this.databaseId = t, this.L = e;\n};\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction We(t, e) {\n  if (t.L) {\n    return \"\".concat(new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\"), \".\").concat((\"000000000\" + e.nanoseconds).slice(-9), \"Z\");\n  }\n  return {\n    seconds: \"\" + e.seconds,\n    nanos: e.nanoseconds\n  };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction Ge(t, e) {\n  return t.L ? e.toBase64() : e.toUint8Array();\n}\nfunction Ke(t, e) {\n  return We(t, e.toTimestamp());\n}\nfunction Ye(t) {\n  return E(!!t), he.fromTimestamp(function (t) {\n    var e = $t(t);\n    return new Ft(e.seconds, e.nanos);\n  }(t));\n}\nfunction He(t, e) {\n  return function (t) {\n    return new tt([\"projects\", t.projectId, \"databases\", t.database]);\n  }(t).child(\"documents\").child(e).canonicalString();\n}\nfunction Ze(t, e) {\n  return He(t.databaseId, e.path);\n}\nfunction Je(t, e) {\n  var n = function (t) {\n    var e = tt.fromString(t);\n    return E(fn(e)), e;\n  }(e);\n  if (n.get(1) !== t.databaseId.projectId) throw new U(P, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n  if (n.get(3) !== t.databaseId.database) throw new U(P, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n  return new rt((E((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n  var r;\n  /** Creates a Document proto from key and fields (but no create/update time) */\n}\n\nfunction Xe(t, e) {\n  return He(t.databaseId, e);\n}\nfunction tn(t) {\n  return new tt([\"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database]).canonicalString();\n}\nfunction en(t, e, n) {\n  return {\n    name: Ze(t, e),\n    fields: n.value.mapValue.fields\n  };\n}\nfunction nn(t, e) {\n  return \"found\" in e ? function (t, e) {\n    E(!!e.found), e.found.name, e.found.updateTime;\n    var n = Je(t, e.found.name),\n      r = Ye(e.found.updateTime),\n      s = e.found.createTime ? Ye(e.found.createTime) : he.min(),\n      i = new ye({\n        mapValue: {\n          fields: e.found.fields\n        }\n      });\n    return ge.newFoundDocument(n, r, s, i);\n  }(t, e) : \"missing\" in e ? function (t, e) {\n    E(!!e.missing), E(!!e.readTime);\n    var n = Je(t, e.missing),\n      r = Ye(e.readTime);\n    return ge.newNoDocument(n, r);\n  }(t, e) : b();\n}\nfunction rn(t, e) {\n  var n;\n  if (e instanceof Ce) n = {\n    update: en(t, e.key, e.value)\n  };else if (e instanceof Me) n = {\n    delete: Ze(t, e.key)\n  };else if (e instanceof Le) n = {\n    update: en(t, e.key, e.data),\n    updateMask: ln(e.fieldMask)\n  };else {\n    if (!(e instanceof Ue)) return b();\n    n = {\n      verify: Ze(t, e.key)\n    };\n  }\n  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function (t) {\n    return function (t, e) {\n      var n = e.transform;\n      if (n instanceof Ne) return {\n        fieldPath: e.field.canonicalString(),\n        setToServerValue: \"REQUEST_TIME\"\n      };\n      if (n instanceof Fe) return {\n        fieldPath: e.field.canonicalString(),\n        appendMissingElements: {\n          values: n.elements\n        }\n      };\n      if (n instanceof xe) return {\n        fieldPath: e.field.canonicalString(),\n        removeAllFromArray: {\n          values: n.elements\n        }\n      };\n      if (n instanceof Se) return {\n        fieldPath: e.field.canonicalString(),\n        increment: n.U\n      };\n      throw b();\n    }(0, t);\n  })), e.precondition.isNone || (n.currentDocument = function (t, e) {\n    return void 0 !== e.updateTime ? {\n      updateTime: Ke(t, e.updateTime)\n    } : void 0 !== e.exists ? {\n      exists: e.exists\n    } : b();\n  }(t, e.precondition)), n;\n}\nfunction sn(t, e) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  var n = {\n      structuredQuery: {}\n    },\n    r = e.path;\n  null !== e.collectionGroup ? (n.parent = Xe(t, r), n.structuredQuery.from = [{\n    collectionId: e.collectionGroup,\n    allDescendants: !0\n  }]) : (n.parent = Xe(t, r.popLast()), n.structuredQuery.from = [{\n    collectionId: r.lastSegment()\n  }]);\n  var s = function (t) {\n    if (0 === t.length) return;\n    return hn(Jt.create(t, \"and\" /* CompositeOperator.AND */));\n  }(e.filters);\n  s && (n.structuredQuery.where = s);\n  var i = function (t) {\n    if (0 === t.length) return;\n    return t.map(function (t) {\n      return (\n        // visible for testing\n        function (t) {\n          return {\n            field: an(t.field),\n            direction: on(t.dir)\n          };\n        }\n        // visible for testing\n        (t)\n      );\n    });\n  }(e.orderBy);\n  i && (n.structuredQuery.orderBy = i);\n  var o = function (t, e) {\n    return t.L || ht(e) ? e : {\n      value: e\n    };\n  }(t, e.limit);\n  var u;\n  return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n    before: (u = e.startAt).inclusive,\n    values: u.position\n  }), e.endAt && (n.structuredQuery.endAt = function (t) {\n    return {\n      before: !t.inclusive,\n      values: t.position\n    };\n  }\n  // visible for testing\n  (e.endAt)), n;\n}\nfunction on(t) {\n  return je[t];\n}\n\n// visible for testing\nfunction un(t) {\n  return Be[t];\n}\nfunction cn(t) {\n  return ze[t];\n}\nfunction an(t) {\n  return {\n    fieldPath: t.canonicalString()\n  };\n}\nfunction hn(t) {\n  return t instanceof Zt ? function (t) {\n    if (\"==\" /* Operator.EQUAL */ === t.op) {\n      if (Qt(t.value)) return {\n        unaryFilter: {\n          field: an(t.field),\n          op: \"IS_NAN\"\n        }\n      };\n      if (zt(t.value)) return {\n        unaryFilter: {\n          field: an(t.field),\n          op: \"IS_NULL\"\n        }\n      };\n    } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n      if (Qt(t.value)) return {\n        unaryFilter: {\n          field: an(t.field),\n          op: \"IS_NOT_NAN\"\n        }\n      };\n      if (zt(t.value)) return {\n        unaryFilter: {\n          field: an(t.field),\n          op: \"IS_NOT_NULL\"\n        }\n      };\n    }\n    return {\n      fieldFilter: {\n        field: an(t.field),\n        op: un(t.op),\n        value: t.value\n      }\n    };\n  }(t) : t instanceof Jt ? function (t) {\n    var e = t.getFilters().map(function (t) {\n      return hn(t);\n    });\n    if (1 === e.length) return e[0];\n    return {\n      compositeFilter: {\n        op: cn(t.op),\n        filters: e\n      }\n    };\n  }(t) : b();\n}\nfunction ln(t) {\n  var e = [];\n  return t.fields.forEach(function (t) {\n    return e.push(t.canonicalString());\n  }), {\n    fieldPaths: e\n  };\n}\nfunction fn(t) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction dn(t) {\n  return new Qe(t, /* useProto3Json= */!0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar wn = /*#__PURE__*/function () {\n  function wn(\n  /**\n   * The AsyncQueue to run backoff operations on.\n   */\n  t,\n  /**\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\n   */\n  e) {\n    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;\n    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 6e4;\n    _classCallCheck(this, wn);\n    this.j = t, this.timerId = e, this.B = n, this.W = r, this.G = s, this.K = 0, this.Y = null, /** The last backoff attempt, as epoch milliseconds. */\n    this.H = Date.now(), this.reset();\n  }\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  _createClass(wn, [{\n    key: \"reset\",\n    value: function reset() {\n      this.K = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n  }, {\n    key: \"Z\",\n    value: function Z() {\n      this.K = this.G;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */\n  }, {\n    key: \"J\",\n    value: function J(t) {\n      var _this24 = this;\n      // Cancel any pending backoff operation.\n      this.cancel();\n      // First schedule using the current base (which may be 0 and should be\n      // honored as such).\n      var e = Math.floor(this.K + this.X()),\n        n = Math.max(0, Date.now() - this.H),\n        r = Math.max(0, e - n);\n      // Guard against lastAttemptTime being in the future due to a clock change.\n      r > 0 && y(\"ExponentialBackoff\", \"Backing off for \".concat(r, \" ms (base delay: \").concat(this.K, \" ms, delay with jitter: \").concat(e, \" ms, last attempt: \").concat(n, \" ms ago)\")), this.Y = this.j.enqueueAfterDelay(this.timerId, r, function () {\n        return _this24.H = Date.now(), t();\n      }),\n      // Apply backoff factor to determine next delay and ensure it is within\n      // bounds.\n      this.K *= this.W, this.K < this.B && (this.K = this.B), this.K > this.G && (this.K = this.G);\n    }\n  }, {\n    key: \"tt\",\n    value: function tt() {\n      null !== this.Y && (this.Y.skipDelay(), this.Y = null);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      null !== this.Y && (this.Y.cancel(), this.Y = null);\n    } /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  }, {\n    key: \"X\",\n    value: function X() {\n      return (Math.random() - .5) * this.K;\n    }\n  }]);\n  return wn;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nvar mn = /*#__PURE__*/function (_ref2) {\n  _inherits(mn, _ref2);\n  function mn(t, e, n, r) {\n    var _this25;\n    _classCallCheck(this, mn);\n    _this25 = _possibleConstructorReturn(this, _getPrototypeOf(mn).call(this)), _this25.authCredentials = t, _this25.appCheckCredentials = e, _this25.connection = n, _this25.M = r, _this25.et = !1;\n    return _this25;\n  }\n  _createClass(mn, [{\n    key: \"nt\",\n    value: function nt() {\n      if (this.et) throw new U(S, \"The client has already been terminated.\");\n    } /** Invokes the provided RPC with auth and AppCheck tokens. */\n  }, {\n    key: \"A\",\n    value: function A(t, e, n) {\n      var _this26 = this;\n      return this.nt(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          r = _ref4[0],\n          s = _ref4[1];\n        return _this26.connection.A(t, e, n, r, s);\n      }).catch(function (t) {\n        throw \"FirebaseError\" === t.name ? (t.code === F && (_this26.authCredentials.invalidateToken(), _this26.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n      });\n    } /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n  }, {\n    key: \"P\",\n    value: function P(t, e, n, r) {\n      var _this27 = this;\n      return this.nt(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          s = _ref6[0],\n          i = _ref6[1];\n        return _this27.connection.P(t, e, n, s, i, r);\n      }).catch(function (t) {\n        throw \"FirebaseError\" === t.name ? (t.code === F && (_this27.authCredentials.invalidateToken(), _this27.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n      });\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      this.et = !0;\n    }\n  }]);\n  return mn;\n}( /*#__PURE__*/function () {\n  function _class3() {\n    _classCallCheck(this, _class3);\n  }\n  return _class3;\n}()); // TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nfunction pn(_x5, _x6) {\n  return _pn.apply(this, arguments);\n}\nfunction _pn() {\n  _pn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(t, e) {\n    var n, r, s;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          n = A(t), r = tn(n.M) + \"/documents\", s = {\n            writes: e.map(function (t) {\n              return rn(n.M, t);\n            })\n          };\n          _context7.next = 3;\n          return n.A(\"Commit\", r, s);\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _pn.apply(this, arguments);\n}\nfunction yn(_x7, _x8) {\n  return _yn.apply(this, arguments);\n}\nfunction _yn() {\n  _yn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(t, e) {\n    var n, r, s, i, o, u;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          n = A(t);\n          r = tn(n.M) + \"/documents\";\n          s = {\n            documents: e.map(function (t) {\n              return Ze(n.M, t);\n            })\n          };\n          _context8.next = 5;\n          return n.P(\"BatchGetDocuments\", r, s, e.length);\n        case 5:\n          i = _context8.sent;\n          o = new Map();\n          i.forEach(function (t) {\n            var e = nn(n.M, t);\n            o.set(e.key.toString(), e);\n          });\n          u = [];\n          return _context8.abrupt(\"return\", (e.forEach(function (t) {\n            var e = o.get(t.toString());\n            E(!!e), u.push(e);\n          }), u));\n        case 10:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _yn.apply(this, arguments);\n}\nfunction gn(_x9, _x10) {\n  return _gn.apply(this, arguments);\n}\nfunction _gn() {\n  _gn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(t, e) {\n    var n, r;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          n = A(t), r = sn(n.M, Re(e));\n          _context9.next = 3;\n          return n.P(\"RunQuery\", r.parent, {\n            structuredQuery: r.structuredQuery\n          });\n        case 3:\n          return _context9.abrupt(\"return\", _context9.sent.filter(function (t) {\n            return !!t.document;\n          }).map(function (t) {\n            return function (t, e, n) {\n              var r = Je(t, e.name),\n                s = Ye(e.updateTime),\n                i = e.createTime ? Ye(e.createTime) : he.min(),\n                o = new ye({\n                  mapValue: {\n                    fields: e.fields\n                  }\n                }),\n                u = ge.newFoundDocument(r, s, i, o);\n              return n && u.setHasCommittedMutations(), n ? u.setHasCommittedMutations() : u;\n            }(n.M, t.document, void 0);\n          }));\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n  return _gn.apply(this, arguments);\n}\nfunction _n(_x11, _x12, _x13) {\n  return _n7.apply(this, arguments);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _n7() {\n  _n7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(t, e, n) {\n    var r, s, i, o, u, c;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          r = A(t), s = function (t, e, n) {\n            var r = sn(t, e),\n              s = [];\n            return n.forEach(function (t) {\n              \"count\" === t.N ? s.push({\n                alias: t.alias.canonicalString(),\n                count: {}\n              }) : \"avg\" === t.N ? s.push({\n                alias: t.alias.canonicalString(),\n                avg: {\n                  field: an(t.fieldPath)\n                }\n              }) : \"sum\" === t.N && s.push({\n                alias: t.alias.canonicalString(),\n                sum: {\n                  field: an(t.fieldPath)\n                }\n              });\n            }), {\n              structuredAggregationQuery: {\n                aggregations: s,\n                structuredQuery: r.structuredQuery\n              },\n              parent: r.parent\n            };\n          }(r.M, Re(e), n), i = s.parent;\n          r.connection.v || delete s.parent;\n          _context10.next = 4;\n          return r.P(\"RunAggregationQuery\", i, s, /*expectedResponseCount=*/1);\n        case 4:\n          o = _context10.sent.filter(function (t) {\n            return !!t.result;\n          });\n          return _context10.abrupt(\"return\", (E(1 === o.length), (u = o[0]).result, u.result.aggregateFields, new ye({\n            mapValue: {\n              fields: null === (c = u.result) || void 0 === c ? void 0 : c.aggregateFields\n            }\n          })));\n        case 6:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n  return _n7.apply(this, arguments);\n}\nvar vn = new Map();\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction bn(t) {\n  if (t._terminated) throw new U(S, \"The client has already been terminated.\");\n  if (!vn.has(t)) {\n    y(\"ComponentProvider\", \"Initializing Datastore\");\n    var i = function (t) {\n        return new pt(t, fetch.bind(null));\n      }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), new Z(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))),\n      o = dn(t._databaseId),\n      u = function (t, e, n, r) {\n        return new mn(t, e, n, r);\n      }(t._authCredentials, t._appCheckCredentials, i, o);\n    vn.set(t, u);\n  }\n  var e, n, r, s;\n  /**\n  * @license\n  * Copyright 2018 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  return vn.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar En = /*#__PURE__*/function () {\n  function En(t) {\n    _classCallCheck(this, En);\n    var e;\n    if (void 0 === t.host) {\n      if (void 0 !== t.ssl) throw new U(P, \"Can't provide ssl option if host option is not set\");\n      this.host = \"firestore.googleapis.com\", this.ssl = true;\n    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {\n      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new U(P, \"cacheSizeBytes must be at least 1048576\");\n      this.cacheSizeBytes = t.cacheSizeBytes;\n    }\n    this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, function (t, e, n, r) {\n      if (!0 === e && !0 === r) throw new U(P, \"\".concat(t, \" and \").concat(n, \" cannot be used together.\"));\n    }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling);\n  }\n  _createClass(En, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n  }]);\n  return En;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */\nvar An = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function An(t, e, n, r) {\n    _classCallCheck(this, An);\n    this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, this._app = r,\n    /**\n     * Whether it's a Firestore or Firestore Lite instance.\n     */\n    this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new En({}), this._settingsFrozen = !1;\n  }\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n  _createClass(An, [{\n    key: \"_setSettings\",\n    value: function _setSettings(t) {\n      if (this._settingsFrozen) throw new U(S, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n      this._settings = new En(t), void 0 !== t.credentials && (this._authCredentials = function (t) {\n        if (!t) return new z();\n        switch (t.type) {\n          case \"gapi\":\n            var e = t.client;\n            return new K(e, t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n          case \"provider\":\n            return t.client;\n          default:\n            throw new U(P, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n        }\n      }(t.credentials));\n    }\n  }, {\n    key: \"_getSettings\",\n    value: function _getSettings() {\n      return this._settings;\n    }\n  }, {\n    key: \"_freezeSettings\",\n    value: function _freezeSettings() {\n      return this._settingsFrozen = !0, this._settings;\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete() {\n      return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    } /** Returns a JSON-serializable representation of this `Firestore` instance. */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        app: this._app,\n        databaseId: this._databaseId,\n        settings: this._settings\n      };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */\n  }, {\n    key: \"_terminate\",\n    value: function _terminate() {\n      return function (t) {\n        var e = vn.get(t);\n        e && (y(\"ComponentProvider\", \"Removing Datastore\"), vn.delete(t), e.terminate());\n      }(this), Promise.resolve();\n    }\n  }, {\n    key: \"app\",\n    get: function get() {\n      if (!this._app) throw new U(S, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n      return this._app;\n    }\n  }, {\n    key: \"_initialized\",\n    get: function get() {\n      return this._settingsFrozen;\n    }\n  }, {\n    key: \"_terminated\",\n    get: function get() {\n      return void 0 !== this._terminateTask;\n    }\n  }]);\n  return An;\n}();\nfunction In(t, e, n) {\n  n || (n = \"(default)\");\n  var r = _getProvider(t, \"firestore/lite\");\n  if (r.isInitialized(n)) throw new U(S, \"Firestore can only be initialized once per app.\");\n  return r.initialize({\n    options: e,\n    instanceIdentifier: n\n  });\n}\nfunction Tn(e, n) {\n  var r = \"object\" == typeof e ? e : getApp(),\n    s = \"string\" == typeof e ? e : n || \"(default)\",\n    i = _getProvider(r, \"firestore/lite\").getImmediate({\n      identifier: s\n    });\n  if (!i._initialized) {\n    var t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n    t && Rn.apply(void 0, [i].concat(_toConsumableArray(t)));\n  }\n  return i;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\nfunction Rn(t, e, n) {\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var s;\n  var i = (t = ct(t, An))._getSettings();\n  if (\"firestore.googleapis.com\" !== i.host && i.host !== e && _(\"Host has been set in both settings() and useEmulator(), emulator host will be used\"), t._setSettings(Object.assign(Object.assign({}, i), {\n    host: \"\".concat(e, \":\").concat(n),\n    ssl: !1\n  })), r.mockUserToken) {\n    var _e13, _n8;\n    if (\"string\" == typeof r.mockUserToken) _e13 = r.mockUserToken, _n8 = d.MOCK_USER;else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      _e13 = createMockUserToken(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n      var _i2 = r.mockUserToken.sub || r.mockUserToken.user_id;\n      if (!_i2) throw new U(P, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      _n8 = new d(_i2);\n    }\n    t._authCredentials = new Q(new B(_e13, _n8));\n  }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\nfunction Pn(t) {\n  return t = ct(t, An), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar Vn =\n/**\n * Create a new AggregateField<T>\n * @param _aggregateType Specifies the type of aggregation operation to perform.\n * @param _internalFieldPath Optionally specifies the field that is aggregated.\n * @internal\n */\nfunction Vn() {\n  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"count\";\n  var e = arguments.length > 1 ? arguments[1] : undefined;\n  _classCallCheck(this, Vn);\n  this._aggregateType = t, this._internalFieldPath = e, /** A type string to uniquely identify instances of this class. */\n  this.type = \"AggregateField\";\n};\n/**\n * The results of executing an aggregation query.\n */\nvar $n = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function $n(t, e, n) {\n    _classCallCheck(this, $n);\n    this._userDataWriter = e, this._data = n, /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateQuerySnapshot\", this.query = t;\n  }\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n  _createClass($n, [{\n    key: \"data\",\n    value: function data() {\n      return this._userDataWriter.convertValue(this._data.value);\n    }\n  }]);\n  return $n;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nvar Dn = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function Dn(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, n) {\n    _classCallCheck(this, Dn);\n    this.converter = e, this._key = n, /** The type of this Firestore reference. */\n    this.type = \"document\", this.firestore = t;\n  }\n  _createClass(Dn, [{\n    key: \"withConverter\",\n    value: function withConverter(t) {\n      return new Dn(this.firestore, t, this._key);\n    }\n  }, {\n    key: \"_path\",\n    get: function get() {\n      return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return new Fn(this.firestore, this.converter, this._key.path.popLast());\n    }\n  }]);\n  return Dn;\n}();\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\nvar Nn = /*#__PURE__*/function () {\n  // This is the lite version of the Query class in the main SDK.\n  /** @hideconstructor protected */\n  function Nn(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, n) {\n    _classCallCheck(this, Nn);\n    this.converter = e, this._query = n, /** The type of this Firestore reference. */\n    this.type = \"query\", this.firestore = t;\n  }\n  _createClass(Nn, [{\n    key: \"withConverter\",\n    value: function withConverter(t) {\n      return new Nn(this.firestore, t, this._query);\n    }\n  }]);\n  return Nn;\n}();\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link query}).\n */\nvar Fn = /*#__PURE__*/function (_Nn) {\n  _inherits(Fn, _Nn);\n  /** @hideconstructor */\n  function Fn(t, e, n) {\n    var _this28;\n    _classCallCheck(this, Fn);\n    _this28 = _possibleConstructorReturn(this, _getPrototypeOf(Fn).call(this, t, e, new be(n))), _this28._path = n, /** The type of this Firestore reference. */\n    _this28.type = \"collection\";\n    return _this28;\n  }\n  /** The collection's identifier. */\n  _createClass(Fn, [{\n    key: \"withConverter\",\n    value: function withConverter(t) {\n      return new Fn(this.firestore, t, this._path);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var t = this._path.popLast();\n      return t.isEmpty() ? null : new Dn(this.firestore, /* converter= */null, new rt(t));\n    }\n  }]);\n  return Fn;\n}(Nn);\nfunction xn(t, e) {\n  for (var _len5 = arguments.length, n = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n    n[_key5 - 2] = arguments[_key5];\n  }\n  if (t = getModularInstance(t), st(\"collection\", \"path\", e), t instanceof An) {\n    var r = tt.fromString.apply(tt, [e].concat(n));\n    return ot(r), new Fn(t, /* converter= */null, r);\n  }\n  {\n    if (!(t instanceof Dn || t instanceof Fn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    var _r2 = t._path.child(tt.fromString.apply(tt, [e].concat(n)));\n    return ot(_r2), new Fn(t.firestore, /* converter= */null, _r2);\n  }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\nfunction Sn(t, e) {\n  if (t = ct(t, An), st(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new U(P, \"Invalid collection ID '\".concat(e, \"' passed to function collectionGroup(). Collection IDs must not contain '/'.\"));\n  return new Nn(t, /* converter= */null, function (t) {\n    return new be(tt.emptyPath(), t);\n  }(e));\n}\nfunction qn(t, e) {\n  for (var _len6 = arguments.length, n = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n    n[_key6 - 2] = arguments[_key6];\n  }\n  if (t = getModularInstance(t),\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  1 === arguments.length && (e = bt.F()), st(\"doc\", \"path\", e), t instanceof An) {\n    var r = tt.fromString.apply(tt, [e].concat(n));\n    return it(r), new Dn(t, /* converter= */null, new rt(r));\n  }\n  {\n    if (!(t instanceof Dn || t instanceof Fn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    var _r3 = t._path.child(tt.fromString.apply(tt, [e].concat(n)));\n    return it(_r3), new Dn(t.firestore, t instanceof Fn ? t.converter : null, new rt(_r3));\n  }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction On(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof Dn || t instanceof Fn) && (e instanceof Dn || e instanceof Fn) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction kn(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof Nn && e instanceof Nn && t.firestore === e.firestore && Ve(t._query, e._query) && t.converter === e.converter;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */\nvar Cn = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function Cn(t) {\n    _classCallCheck(this, Cn);\n    this._byteString = t;\n  }\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n  _createClass(Cn, [{\n    key: \"toBase64\",\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */\n    value: function toBase64() {\n      return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this._byteString.isEqual(t._byteString);\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(t) {\n      try {\n        return new Cn(Pt.fromBase64String(t));\n      } catch (t) {\n        throw new U(P, \"Failed to construct data from Base64 string: \" + t);\n      }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(t) {\n      return new Cn(Pt.fromUint8Array(t));\n    }\n  }]);\n  return Cn;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\nvar Ln = /*#__PURE__*/function () {\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  function Ln() {\n    _classCallCheck(this, Ln);\n    for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      t[_key7] = arguments[_key7];\n    }\n    for (var e = 0; e < t.length; ++e) if (0 === t[e].length) throw new U(P, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n    this._internalPath = new nt(t);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n  _createClass(Ln, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this._internalPath.isEqual(t._internalPath);\n    }\n  }]);\n  return Ln;\n}();\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\nfunction Mn() {\n  return new Ln(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\nvar Un =\n/**\n * @param _methodName - The public API endpoint that returns this class.\n * @hideconstructor\n */\nfunction Un(t) {\n  _classCallCheck(this, Un);\n  this._methodName = t;\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\nvar jn = /*#__PURE__*/function () {\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  function jn(t, e) {\n    _classCallCheck(this, jn);\n    if (!isFinite(t) || t < -90 || t > 90) throw new U(P, \"Latitude must be a number between -90 and 90, but was: \" + t);\n    if (!isFinite(e) || e < -180 || e > 180) throw new U(P, \"Longitude must be a number between -180 and 180, but was: \" + e);\n    this._lat = t, this._long = e;\n  }\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n  _createClass(jn, [{\n    key: \"isEqual\",\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */\n    value: function isEqual(t) {\n      return this._lat === t._lat && this._long === t._long;\n    } /** Returns a JSON-serializable representation of this GeoPoint. */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        latitude: this._lat,\n        longitude: this._long\n      };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n  }, {\n    key: \"_compareTo\",\n    value: function _compareTo(t) {\n      return Et(this._lat, t._lat) || Et(this._long, t._long);\n    }\n  }, {\n    key: \"latitude\",\n    get: function get() {\n      return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */\n  }, {\n    key: \"longitude\",\n    get: function get() {\n      return this._long;\n    }\n  }]);\n  return jn;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Bn = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */\nvar zn = /*#__PURE__*/function () {\n  function zn(t, e, n) {\n    _classCallCheck(this, zn);\n    this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n  }\n  _createClass(zn, [{\n    key: \"toMutation\",\n    value: function toMutation(t, e) {\n      return null !== this.fieldMask ? new Le(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Ce(t, this.data, e, this.fieldTransforms);\n    }\n  }]);\n  return zn;\n}();\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar Qn = /*#__PURE__*/function () {\n  function Qn(t,\n  // The fieldMask does not include document transforms.\n  e, n) {\n    _classCallCheck(this, Qn);\n    this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n  }\n  _createClass(Qn, [{\n    key: \"toMutation\",\n    value: function toMutation(t, e) {\n      return new Le(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n  }]);\n  return Qn;\n}();\nfunction Wn(t) {\n  switch (t) {\n    case 0 /* UserDataSource.Set */:\n    // fall through\n    case 2 /* UserDataSource.MergeSet */:\n    // fall through\n    case 1 /* UserDataSource.Update */:\n      return !0;\n    case 3 /* UserDataSource.Argument */:\n    case 4 /* UserDataSource.ArrayArgument */:\n      return !1;\n    default:\n      throw b();\n  }\n}\n\n/** A \"context\" object passed around while parsing user data. */\nvar Gn = /*#__PURE__*/function () {\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  function Gn(t, e, n, r, s, i) {\n    _classCallCheck(this, Gn);\n    this.settings = t, this.databaseId = e, this.M = n, this.ignoreUndefinedProperties = r,\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    void 0 === s && this.rt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n  }\n  _createClass(Gn, [{\n    key: \"it\",\n    /** Returns a new context with the specified settings overwritten. */value: function it(t) {\n      return new Gn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.M, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n  }, {\n    key: \"ot\",\n    value: function ot(t) {\n      var e;\n      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n        r = this.it({\n          path: n,\n          ut: !1\n        });\n      return r.ct(t), r;\n    }\n  }, {\n    key: \"at\",\n    value: function at(t) {\n      var e;\n      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n        r = this.it({\n          path: n,\n          ut: !1\n        });\n      return r.rt(), r;\n    }\n  }, {\n    key: \"ht\",\n    value: function ht(t) {\n      // TODO(b/34871131): We don't support array paths right now; so make path\n      // undefined.\n      return this.it({\n        path: void 0,\n        ut: !0\n      });\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(t) {\n      return dr(t, this.settings.methodName, this.settings.ft || !1, this.path, this.settings.dt);\n    } /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  }, {\n    key: \"contains\",\n    value: function contains(t) {\n      return void 0 !== this.fieldMask.find(function (e) {\n        return t.isPrefixOf(e);\n      }) || void 0 !== this.fieldTransforms.find(function (e) {\n        return t.isPrefixOf(e.field);\n      });\n    }\n  }, {\n    key: \"rt\",\n    value: function rt() {\n      // TODO(b/34871131): Remove null check once we have proper paths for fields\n      // within arrays.\n      if (this.path) for (var t = 0; t < this.path.length; t++) this.ct(this.path.get(t));\n    }\n  }, {\n    key: \"ct\",\n    value: function ct(t) {\n      if (0 === t.length) throw this.lt(\"Document fields must not be empty\");\n      if (Wn(this.st) && Bn.test(t)) throw this.lt('Document fields cannot begin and end with \"__\"');\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this.settings.path;\n    }\n  }, {\n    key: \"st\",\n    get: function get() {\n      return this.settings.st;\n    }\n  }]);\n  return Gn;\n}();\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar Kn = /*#__PURE__*/function () {\n  function Kn(t, e, n) {\n    _classCallCheck(this, Kn);\n    this.databaseId = t, this.ignoreUndefinedProperties = e, this.M = n || dn(t);\n  }\n  /** Creates a new top-level parse context. */\n  _createClass(Kn, [{\n    key: \"wt\",\n    value: function wt(t, e, n) {\n      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n      return new Gn({\n        st: t,\n        methodName: e,\n        dt: n,\n        path: nt.emptyPath(),\n        ut: !1,\n        ft: r\n      }, this.databaseId, this.M, this.ignoreUndefinedProperties);\n    }\n  }]);\n  return Kn;\n}();\nfunction Yn(t) {\n  var e = t._freezeSettings(),\n    n = dn(t._databaseId);\n  return new Kn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n\n/** Parse document data from a set() call. */\nfunction Hn(t, e, n, r, s) {\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var o = t.wt(i.merge || i.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */, e, n, s);\n  ar(\"Data must be an object, but it was:\", o, r);\n  var u = ur(r, o);\n  var c, a;\n  if (i.merge) c = new pe(o.fieldMask), a = o.fieldTransforms;else if (i.mergeFields) {\n    var _t17 = [];\n    var _iterator9 = _createForOfIteratorHelper(i.mergeFields),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _r4 = _step9.value;\n        var _s2 = hr(e, _r4, n);\n        if (!o.contains(_s2)) throw new U(P, \"Field '\".concat(_s2, \"' is specified in your field mask but missing from your input data.\"));\n        wr(_t17, _s2) || _t17.push(_s2);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    c = new pe(_t17), a = o.fieldTransforms.filter(function (t) {\n      return c.covers(t.field);\n    });\n  } else c = null, a = o.fieldTransforms;\n  return new zn(new ye(u), c, a);\n}\nvar Zn = /*#__PURE__*/function (_Un) {\n  _inherits(Zn, _Un);\n  function Zn() {\n    _classCallCheck(this, Zn);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Zn).apply(this, arguments));\n  }\n  _createClass(Zn, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      if (2 /* UserDataSource.MergeSet */ !== t.st) throw 1 /* UserDataSource.Update */ === t.st ? t.lt(\"\".concat(this._methodName, \"() can only appear at the top level of your update data\")) : t.lt(\"\".concat(this._methodName, \"() cannot be used with set() unless you pass {merge:true}\"));\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      return t.fieldMask.push(t.path), null;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof Zn;\n    }\n  }]);\n  return Zn;\n}(Un);\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\nfunction Jn(t, e, n) {\n  return new Gn({\n    st: 3 /* UserDataSource.Argument */,\n    dt: e.settings.dt,\n    methodName: t._methodName,\n    ut: n\n  }, e.databaseId, e.M, e.ignoreUndefinedProperties);\n}\nvar Xn = /*#__PURE__*/function (_Un2) {\n  _inherits(Xn, _Un2);\n  function Xn() {\n    _classCallCheck(this, Xn);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Xn).apply(this, arguments));\n  }\n  _createClass(Xn, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      return new qe(t.path, new Ne());\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof Xn;\n    }\n  }]);\n  return Xn;\n}(Un);\nvar tr = /*#__PURE__*/function (_Un3) {\n  _inherits(tr, _Un3);\n  function tr(t, e) {\n    var _this29;\n    _classCallCheck(this, tr);\n    _this29 = _possibleConstructorReturn(this, _getPrototypeOf(tr).call(this, t)), _this29.yt = e;\n    return _this29;\n  }\n  _createClass(tr, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      var e = Jn(this, t, /*array=*/!0),\n        n = this.yt.map(function (t) {\n          return or(t, e);\n        }),\n        r = new Fe(n);\n      return new qe(t.path, r);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      // TODO(mrschmidt): Implement isEquals\n      return this === t;\n    }\n  }]);\n  return tr;\n}(Un);\nvar er = /*#__PURE__*/function (_Un4) {\n  _inherits(er, _Un4);\n  function er(t, e) {\n    var _this30;\n    _classCallCheck(this, er);\n    _this30 = _possibleConstructorReturn(this, _getPrototypeOf(er).call(this, t)), _this30.yt = e;\n    return _this30;\n  }\n  _createClass(er, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      var e = Jn(this, t, /*array=*/!0),\n        n = this.yt.map(function (t) {\n          return or(t, e);\n        }),\n        r = new xe(n);\n      return new qe(t.path, r);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      // TODO(mrschmidt): Implement isEquals\n      return this === t;\n    }\n  }]);\n  return er;\n}(Un);\nvar nr = /*#__PURE__*/function (_Un5) {\n  _inherits(nr, _Un5);\n  function nr(t, e) {\n    var _this31;\n    _classCallCheck(this, nr);\n    _this31 = _possibleConstructorReturn(this, _getPrototypeOf(nr).call(this, t)), _this31.gt = e;\n    return _this31;\n  }\n  _createClass(nr, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      var e = new Se(t.M, $e(t.M, this.gt));\n      return new qe(t.path, e);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      // TODO(mrschmidt): Implement isEquals\n      return this === t;\n    }\n  }]);\n  return nr;\n}(Un);\n/** Parse update data from an update() call. */\nfunction rr(t, e, n, r) {\n  var s = t.wt(1 /* UserDataSource.Update */, e, n);\n  ar(\"Data must be an object, but it was:\", s, r);\n  var i = [],\n    o = ye.empty();\n  Tt(r, function (t, r) {\n    var u = fr(e, t, n);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    r = getModularInstance(r);\n    var c = s.at(u);\n    if (r instanceof Zn)\n      // Add it to the field mask, but don't add anything to updateData.\n      i.push(u);else {\n      var _t18 = or(r, c);\n      null != _t18 && (i.push(u), o.set(u, _t18));\n    }\n  });\n  var u = new pe(i);\n  return new Qn(o, u, s.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */\nfunction sr(t, e, n, r, s, i) {\n  var o = t.wt(1 /* UserDataSource.Update */, e, n),\n    u = [hr(e, r, n)],\n    c = [s];\n  if (i.length % 2 != 0) throw new U(P, \"Function \".concat(e, \"() needs to be called with an even number of arguments that alternate between field names and values.\"));\n  for (var _t19 = 0; _t19 < i.length; _t19 += 2) u.push(hr(e, i[_t19])), c.push(i[_t19 + 1]);\n  var a = [],\n    h = ye.empty();\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (var _t20 = u.length - 1; _t20 >= 0; --_t20) if (!wr(a, u[_t20])) {\n    var _e14 = u[_t20];\n    var _n9 = c[_t20];\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    _n9 = getModularInstance(_n9);\n    var _r5 = o.at(_e14);\n    if (_n9 instanceof Zn)\n      // Add it to the field mask, but don't add anything to updateData.\n      a.push(_e14);else {\n      var _t21 = or(_n9, _r5);\n      null != _t21 && (a.push(_e14), h.set(_e14, _t21));\n    }\n  }\n  var f = new pe(a);\n  return new Qn(h, f, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nfunction ir(t, e, n) {\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n  return or(n, t.wt(r ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */, e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nfunction or(t, e) {\n  if (cr(\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  t = getModularInstance(t))) return ar(\"Unsupported field value:\", e, t), ur(t, e);\n  if (t instanceof Un)\n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n    * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n    * context.fieldTransforms.\n    */\n    return function (t, e) {\n      // Sentinels are only supported with writes, and not within arrays.\n      if (!Wn(e.st)) throw e.lt(\"\".concat(t._methodName, \"() can only be used with update() and set()\"));\n      if (!e.path) throw e.lt(\"\".concat(t._methodName, \"() is not currently supported inside arrays\"));\n      var n = t._toFieldTransform(e);\n      n && e.fieldTransforms.push(n);\n    }\n    /**\n    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n    *\n    * @returns The parsed value\n    */(t, e), null;\n  if (void 0 === t && e.ignoreUndefinedProperties)\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  if (\n  // If context.path is null we are inside an array and we don't support\n  // field mask paths more granular than the top-level array.\n  e.path && e.fieldMask.push(e.path), t instanceof Array) {\n    // TODO(b/34871131): Include the path containing the array in the error\n    // message.\n    // In the case of IN queries, the parsed data is an array (representing\n    // the set of values to be included for the IN query) that may directly\n    // contain additional arrays (each representing an individual field\n    // value), so we disable this validation.\n    if (e.settings.ut && 4 /* UserDataSource.ArrayArgument */ !== e.st) throw e.lt(\"Nested arrays are not supported\");\n    return function (t, e) {\n      var n = [];\n      var r = 0;\n      var _iterator10 = _createForOfIteratorHelper(t),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var s = _step10.value;\n          var _t22 = or(s, e.ht(r));\n          null == _t22 && (\n          // Just include nulls in the array for fields being replaced with a\n          // sentinel.\n          _t22 = {\n            nullValue: \"NULL_VALUE\"\n          }), n.push(_t22), r++;\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return {\n        arrayValue: {\n          values: n\n        }\n      };\n    }(t, e);\n  }\n  return function (t, e) {\n    if (null === (t = getModularInstance(t))) return {\n      nullValue: \"NULL_VALUE\"\n    };\n    if (\"number\" == typeof t) return $e(e.M, t);\n    if (\"boolean\" == typeof t) return {\n      booleanValue: t\n    };\n    if (\"string\" == typeof t) return {\n      stringValue: t\n    };\n    if (t instanceof Date) {\n      var n = Ft.fromDate(t);\n      return {\n        timestampValue: We(e.M, n)\n      };\n    }\n    if (t instanceof Ft) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      var _n10 = new Ft(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n      return {\n        timestampValue: We(e.M, _n10)\n      };\n    }\n    if (t instanceof jn) return {\n      geoPointValue: {\n        latitude: t.latitude,\n        longitude: t.longitude\n      }\n    };\n    if (t instanceof Cn) return {\n      bytesValue: Ge(e.M, t._byteString)\n    };\n    if (t instanceof Dn) {\n      var _n11 = e.databaseId,\n        r = t.firestore._databaseId;\n      if (!r.isEqual(_n11)) throw e.lt(\"Document reference is for database \".concat(r.projectId, \"/\").concat(r.database, \" but should be for database \").concat(_n11.projectId, \"/\").concat(_n11.database));\n      return {\n        referenceValue: He(t.firestore._databaseId || e.databaseId, t._key.path)\n      };\n    }\n    throw e.lt(\"Unsupported field value: \".concat(ut(t)));\n  }\n  /**\n  * Checks whether an object looks like a JSON object that should be converted\n  * into a struct. Normal class/prototype instances are considered to look like\n  * JSON objects since they should be converted to a struct value. Arrays, Dates,\n  * GeoPoints, etc. are not considered to look like JSON objects since they map\n  * to specific FieldValue types other than ObjectValue.\n  */(t, e);\n}\nfunction ur(t, e) {\n  var n = {};\n  return !function (t) {\n    for (var _e15 in t) if (Object.prototype.hasOwnProperty.call(t, _e15)) return !1;\n    return !0;\n  }(t) ? Tt(t, function (t, r) {\n    var s = or(r, e.ot(t));\n    null != s && (n[t] = s);\n  }) :\n  // If we encounter an empty object, we explicitly add it to the update\n  // mask to ensure that the server creates a map entry.\n  e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n    mapValue: {\n      fields: n\n    }\n  };\n}\nfunction cr(t) {\n  return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Ft || t instanceof jn || t instanceof Cn || t instanceof Dn || t instanceof Un);\n}\nfunction ar(t, e, n) {\n  if (!cr(n) || !function (t) {\n    return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n  }(n)) {\n    var r = ut(n);\n    throw \"an object\" === r ? e.lt(t + \" a custom object\") : e.lt(t + \" \" + r);\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction hr(t, e, n) {\n  if ((\n  // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  e = getModularInstance(e)) instanceof Ln) return e._internalPath;\n  if (\"string\" == typeof e) return fr(t, e);\n  throw dr(\"Field path arguments must be of type string or \", t, /* hasConverter= */!1, /* path= */void 0, n);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar lr = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\nfunction fr(t, e, n) {\n  if (e.search(lr) >= 0) throw dr(\"Invalid field path (\".concat(e, \"). Paths must not contain '~', '*', '/', '[', or ']'\"), t, /* hasConverter= */!1, /* path= */void 0, n);\n  try {\n    return _construct(Ln, _toConsumableArray(e.split(\".\")))._internalPath;\n  } catch (r) {\n    throw dr(\"Invalid field path (\".concat(e, \"). Paths must not be empty, begin with '.', end with '.', or contain '..'\"), t, /* hasConverter= */!1, /* path= */void 0, n);\n  }\n}\nfunction dr(t, e, n, r, s) {\n  var i = r && !r.isEmpty(),\n    o = void 0 !== s;\n  var u = \"Function \".concat(e, \"() called with invalid data\");\n  n && (u += \" (via `toFirestore()`)\"), u += \". \";\n  var c = \"\";\n  return (i || o) && (c += \" (found\", i && (c += \" in field \".concat(r)), o && (c += \" in document \".concat(s)), c += \")\"), new U(P, u + t + c);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction wr(t, e) {\n  return t.some(function (t) {\n    return t.isEqual(e);\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\nvar mr = /*#__PURE__*/function () {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n  /** @hideconstructor protected */\n  function mr(t, e, n, r, s) {\n    _classCallCheck(this, mr);\n    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, this._converter = s;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n  _createClass(mr, [{\n    key: \"exists\",\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */\n    value: function exists() {\n      return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */\n  }, {\n    key: \"data\",\n    value: function data() {\n      if (this._document) {\n        if (this._converter) {\n          // We only want to use the converter and create a new DocumentSnapshot\n          // if a converter has been provided.\n          var t = new pr(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */null);\n          return this._converter.fromFirestore(t);\n        }\n        return this._userDataWriter.convertValue(this._document.data.value);\n      }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      if (this._document) {\n        var e = this._document.data.field(_r(\"DocumentSnapshot.get\", t));\n        if (null !== e) return this._userDataWriter.convertValue(e);\n      }\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return new Dn(this._firestore, this._converter, this._key);\n    }\n  }]);\n  return mr;\n}();\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\nvar pr = /*#__PURE__*/function (_mr) {\n  _inherits(pr, _mr);\n  function pr() {\n    _classCallCheck(this, pr);\n    return _possibleConstructorReturn(this, _getPrototypeOf(pr).apply(this, arguments));\n  }\n  _createClass(pr, [{\n    key: \"data\",\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    value: function data() {\n      return _get(_getPrototypeOf(pr.prototype), \"data\", this).call(this);\n    }\n  }]);\n  return pr;\n}(mr);\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nvar yr = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function yr(t, e) {\n    _classCallCheck(this, yr);\n    this._docs = e, this.query = t;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n  _createClass(yr, [{\n    key: \"forEach\",\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */\n    value: function forEach(t, e) {\n      this._docs.forEach(t, e);\n    }\n  }, {\n    key: \"docs\",\n    get: function get() {\n      return _toConsumableArray(this._docs);\n    } /** The number of documents in the `QuerySnapshot`. */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.docs.length;\n    } /** True if there are no documents in the `QuerySnapshot`. */\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return 0 === this.docs.length;\n    }\n  }]);\n  return yr;\n}();\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\nfunction gr(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof mr && e instanceof mr ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof yr && e instanceof yr && kn(t.query, e.query) && At(t.docs, e.docs, gr);\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\nfunction _r(t, e) {\n  return \"string\" == typeof e ? fr(t, e) : e instanceof Ln ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nvar vr = function vr() {\n  _classCallCheck(this, vr);\n};\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link startAt}, {@link startAfter}, {@link\n * endBefore}, {@link endAt}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nvar br = /*#__PURE__*/function (_vr) {\n  _inherits(br, _vr);\n  function br() {\n    _classCallCheck(this, br);\n    return _possibleConstructorReturn(this, _getPrototypeOf(br).apply(this, arguments));\n  }\n  return br;\n}(vr);\nfunction Er(t, e) {\n  var r = [];\n  for (var _len8 = arguments.length, n = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n    n[_key8 - 2] = arguments[_key8];\n  }\n  e instanceof vr && r.push(e), r = r.concat(n), function (t) {\n    var e = t.filter(function (t) {\n        return t instanceof Tr;\n      }).length,\n      n = t.filter(function (t) {\n        return t instanceof Ar;\n      }).length;\n    if (e > 1 || e > 0 && n > 0) throw new U(P, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /**\n  * Converts Firestore's internal types to the JavaScript types that we expose\n  * to the user.\n  *\n  * @internal\n  */(r);\n  var _iterator11 = _createForOfIteratorHelper(r),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var _e16 = _step11.value;\n      t = _e16._apply(t);\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link query} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */\nvar Ar = /*#__PURE__*/function (_br) {\n  _inherits(Ar, _br);\n  /**\n   * @internal\n   */\n  function Ar(t, e, n) {\n    var _this32;\n    _classCallCheck(this, Ar);\n    _this32 = _possibleConstructorReturn(this, _getPrototypeOf(Ar).call(this)), _this32._field = t, _this32._op = e, _this32._value = n, /** The type of this query constraint */\n    _this32.type = \"where\";\n    return _this32;\n  }\n  _createClass(Ar, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = this._parse(t);\n      return jr(t._query, e), new Nn(t.firestore, t.converter, Pe(t._query, e));\n    }\n  }, {\n    key: \"_parse\",\n    value: function _parse(t) {\n      var e = Yn(t.firestore),\n        n = function (t, e, n, r, s, i, o) {\n          var u;\n          if (s.isKeyField()) {\n            if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === i || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === i) throw new U(P, \"Invalid Query. You can't perform '\".concat(i, \"' queries on documentId().\"));\n            if (\"in\" /* Operator.IN */ === i || \"not-in\" /* Operator.NOT_IN */ === i) {\n              Ur(o, i);\n              var _e17 = [];\n              var _iterator12 = _createForOfIteratorHelper(o),\n                _step12;\n              try {\n                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                  var _n12 = _step12.value;\n                  _e17.push(Mr(r, t, _n12));\n                }\n              } catch (err) {\n                _iterator12.e(err);\n              } finally {\n                _iterator12.f();\n              }\n              u = {\n                arrayValue: {\n                  values: _e17\n                }\n              };\n            } else u = Mr(r, t, o);\n          } else \"in\" /* Operator.IN */ !== i && \"not-in\" /* Operator.NOT_IN */ !== i && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== i || Ur(o, i), u = ir(n, e, o, /* allowArrays= */\"in\" /* Operator.IN */ === i || \"not-in\" /* Operator.NOT_IN */ === i);\n          return Zt.create(s, i, u);\n        }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n      return n;\n    }\n  }], [{\n    key: \"_create\",\n    value: function _create(t, e, n) {\n      return new Ar(t, e, n);\n    }\n  }]);\n  return Ar;\n}(br);\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */\nfunction Ir(t, e, n) {\n  var r = e,\n    s = _r(\"where\", t);\n  return Ar._create(s, r, n);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link query} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n * @internal TODO remove this internal tag with OR Query support in the server\n */\nvar Tr = /*#__PURE__*/function (_vr2) {\n  _inherits(Tr, _vr2);\n  /**\n   * @internal\n   */\n  function Tr( /** The type of this query constraint */\n  t, e) {\n    var _this33;\n    _classCallCheck(this, Tr);\n    _this33 = _possibleConstructorReturn(this, _getPrototypeOf(Tr).call(this)), _this33.type = t, _this33._queryConstraints = e;\n    return _this33;\n  }\n  _createClass(Tr, [{\n    key: \"_parse\",\n    value: function _parse(t) {\n      var e = this._queryConstraints.map(function (e) {\n        return e._parse(t);\n      }).filter(function (t) {\n        return t.getFilters().length > 0;\n      });\n      return 1 === e.length ? e[0] : Jt.create(e, this._getOperator());\n    }\n  }, {\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = this._parse(t);\n      return 0 === e.getFilters().length ? t : (function (t, e) {\n        var n = t;\n        var r = e.getFlattenedFilters();\n        var _iterator13 = _createForOfIteratorHelper(r),\n          _step13;\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var _t23 = _step13.value;\n            jr(n, _t23), n = Pe(n, _t23);\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n      }\n      // Checks if any of the provided filter operators are included in the given list of filters and\n      // returns the first one that is, or null if none are.\n      (t._query, e), new Nn(t.firestore, t.converter, Pe(t._query, e)));\n    }\n  }, {\n    key: \"_getQueryConstraints\",\n    value: function _getQueryConstraints() {\n      return this._queryConstraints;\n    }\n  }, {\n    key: \"_getOperator\",\n    value: function _getOperator() {\n      return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n    }\n  }], [{\n    key: \"_create\",\n    value: function _create(t, e) {\n      return new Tr(t, e);\n    }\n  }]);\n  return Tr;\n}(vr);\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n * @internal TODO remove this internal tag with OR Query support in the server\n */\nfunction Rr() {\n  for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    t[_key9] = arguments[_key9];\n  }\n  // Only support QueryFilterConstraints\n  return t.forEach(function (t) {\n    return zr(\"or\", t);\n  }), Tr._create(\"or\" /* CompositeOperator.OR */, t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n * @internal TODO remove this internal tag with OR Query support in the server\n */\nfunction Pr() {\n  for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    t[_key10] = arguments[_key10];\n  }\n  // Only support QueryFilterConstraints\n  return t.forEach(function (t) {\n    return zr(\"and\", t);\n  }), Tr._create(\"and\" /* CompositeOperator.AND */, t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link query} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */\nvar Vr = /*#__PURE__*/function (_br2) {\n  _inherits(Vr, _br2);\n  /**\n   * @internal\n   */\n  function Vr(t, e) {\n    var _this34;\n    _classCallCheck(this, Vr);\n    _this34 = _possibleConstructorReturn(this, _getPrototypeOf(Vr).call(this)), _this34._field = t, _this34._direction = e, /** The type of this query constraint */\n    _this34.type = \"orderBy\";\n    return _this34;\n  }\n  _createClass(Vr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = function (t, e, n) {\n        if (null !== t.startAt) throw new U(P, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n        if (null !== t.endAt) throw new U(P, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n        var r = new ce(e, n);\n        return function (t, e) {\n          if (null === Ee(t)) {\n            // This is the first order by. It must match any inequality.\n            var _n13 = Ae(t);\n            null !== _n13 && Br(t, _n13, e.field);\n          }\n        }(t, r), r;\n      }\n      /**\n      * Create a `Bound` from a query and a document.\n      *\n      * Note that the `Bound` will always include the key of the document\n      * and so only the provided document will compare equal to the returned\n      * position.\n      *\n      * Will throw if the document does not contain all fields of the order by\n      * of the query or if any of the fields in the order by are an uncommitted\n      * server timestamp.\n      */(t._query, this._field, this._direction);\n      return new Nn(t.firestore, t.converter, function (t, e) {\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var n = t.explicitOrderBy.concat([e]);\n        return new be(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n      }(t._query, e));\n    }\n  }], [{\n    key: \"_create\",\n    value: function _create(t, e) {\n      return new Vr(t, e);\n    }\n  }]);\n  return Vr;\n}(br);\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */\nfunction $r(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"asc\";\n  var n = e,\n    r = _r(\"orderBy\", t);\n  return Vr._create(r, n);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link query} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */\nvar Dr = /*#__PURE__*/function (_br3) {\n  _inherits(Dr, _br3);\n  /**\n   * @internal\n   */\n  function Dr( /** The type of this query constraint */\n  t, e, n) {\n    var _this35;\n    _classCallCheck(this, Dr);\n    _this35 = _possibleConstructorReturn(this, _getPrototypeOf(Dr).call(this)), _this35.type = t, _this35._limit = e, _this35._limitType = n;\n    return _this35;\n  }\n  _createClass(Dr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      return new Nn(t.firestore, t.converter, function (t, e, n) {\n        return new be(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n      }(t._query, this._limit, this._limitType));\n    }\n  }], [{\n    key: \"_create\",\n    value: function _create(t, e, n) {\n      return new Dr(t, e, n);\n    }\n  }]);\n  return Dr;\n}(br);\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction Nr(t) {\n  return at(\"limit\", t), Dr._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction Fr(t) {\n  return at(\"limitToLast\", t), Dr._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link query} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */\nvar xr = /*#__PURE__*/function (_br4) {\n  _inherits(xr, _br4);\n  /**\n   * @internal\n   */\n  function xr( /** The type of this query constraint */\n  t, e, n) {\n    var _this36;\n    _classCallCheck(this, xr);\n    _this36 = _possibleConstructorReturn(this, _getPrototypeOf(xr).call(this)), _this36.type = t, _this36._docOrFields = e, _this36._inclusive = n;\n    return _this36;\n  }\n  _createClass(xr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = Lr(t, this.type, this._docOrFields, this._inclusive);\n      return new Nn(t.firestore, t.converter, function (t, e) {\n        return new be(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n      }(t._query, e));\n    }\n  }], [{\n    key: \"_create\",\n    value: function _create(t, e, n) {\n      return new xr(t, e, n);\n    }\n  }]);\n  return xr;\n}(br);\nfunction Sr() {\n  for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    t[_key11] = arguments[_key11];\n  }\n  return xr._create(\"startAt\", t, /*inclusive=*/!0);\n}\nfunction qr() {\n  for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n    t[_key12] = arguments[_key12];\n  }\n  return xr._create(\"startAfter\", t, /*inclusive=*/!1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link query} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */\nvar Or = /*#__PURE__*/function (_br5) {\n  _inherits(Or, _br5);\n  /**\n   * @internal\n   */\n  function Or( /** The type of this query constraint */\n  t, e, n) {\n    var _this37;\n    _classCallCheck(this, Or);\n    _this37 = _possibleConstructorReturn(this, _getPrototypeOf(Or).call(this)), _this37.type = t, _this37._docOrFields = e, _this37._inclusive = n;\n    return _this37;\n  }\n  _createClass(Or, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = Lr(t, this.type, this._docOrFields, this._inclusive);\n      return new Nn(t.firestore, t.converter, function (t, e) {\n        return new be(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n      }(t._query, e));\n    }\n  }], [{\n    key: \"_create\",\n    value: function _create(t, e, n) {\n      return new Or(t, e, n);\n    }\n  }]);\n  return Or;\n}(br);\nfunction kr() {\n  for (var _len13 = arguments.length, t = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n    t[_key13] = arguments[_key13];\n  }\n  return Or._create(\"endBefore\", t, /*inclusive=*/!1);\n}\nfunction Cr() {\n  for (var _len14 = arguments.length, t = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n    t[_key14] = arguments[_key14];\n  }\n  return Or._create(\"endAt\", t, /*inclusive=*/!0);\n}\n\n/** Helper function to create a bound from a document or fields */\nfunction Lr(t, e, n, r) {\n  if (n[0] = getModularInstance(n[0]), n[0] instanceof mr) return function (t, e, n, r, s) {\n    if (!r) throw new U($, \"Can't use a DocumentSnapshot that doesn't exist for \".concat(n, \"().\"));\n    var i = [];\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    var _iterator14 = _createForOfIteratorHelper(Te(t)),\n      _step14;\n    try {\n      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n        var _n14 = _step14.value;\n        if (_n14.field.isKeyField()) i.push(jt(e, r.key));else {\n          var _t24 = r.data.field(_n14.field);\n          if (xt(_t24)) throw new U(P, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + _n14.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n          if (null === _t24) {\n            var _t25 = _n14.field.canonicalString();\n            throw new U(P, \"Invalid query. You are trying to start or end a query using a document for which the field '\".concat(_t25, \"' (used as the orderBy) does not exist.\"));\n          }\n          i.push(_t24);\n        }\n      }\n    } catch (err) {\n      _iterator14.e(err);\n    } finally {\n      _iterator14.f();\n    }\n    return new Kt(i, s);\n  }\n  /**\n  * Converts a list of field values to a `Bound` for the given query.\n  */(t._query, t.firestore._databaseId, e, n[0]._document, r);\n  {\n    var s = Yn(t.firestore);\n    return function (t, e, n, r, s, i) {\n      // Use explicit order by's because it has to match the query the user made\n      var o = t.explicitOrderBy;\n      if (s.length > o.length) throw new U(P, \"Too many arguments provided to \".concat(r, \"(). The number of arguments must be less than or equal to the number of orderBy() clauses\"));\n      var u = [];\n      for (var _i3 = 0; _i3 < s.length; _i3++) {\n        var c = s[_i3];\n        if (o[_i3].field.isKeyField()) {\n          if (\"string\" != typeof c) throw new U(P, \"Invalid query. Expected a string for document ID in \".concat(r, \"(), but got a \").concat(typeof c));\n          if (!Ie(t) && -1 !== c.indexOf(\"/\")) throw new U(P, \"Invalid query. When querying a collection and ordering by documentId(), the value passed to \".concat(r, \"() must be a plain document ID, but '\").concat(c, \"' contains a slash.\"));\n          var _n15 = t.path.child(tt.fromString(c));\n          if (!rt.isDocumentKey(_n15)) throw new U(P, \"Invalid query. When querying a collection group and ordering by documentId(), the value passed to \".concat(r, \"() must result in a valid document path, but '\").concat(_n15, \"' is not because it contains an odd number of segments.\"));\n          var _s3 = new rt(_n15);\n          u.push(jt(e, _s3));\n        } else {\n          var _t26 = ir(n, r, c);\n          u.push(_t26);\n        }\n      }\n      return new Kt(u, i);\n    }\n    /**\n    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n    * appropriate errors if the value is anything other than a `DocumentReference`\n    * or `string`, or if the string is malformed.\n    */(t._query, t.firestore._databaseId, s, e, n, r);\n  }\n}\nfunction Mr(t, e, n) {\n  if (\"string\" == typeof (n = getModularInstance(n))) {\n    if (\"\" === n) throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n    if (!Ie(e) && -1 !== n.indexOf(\"/\")) throw new U(P, \"Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '\".concat(n, \"' contains a '/' character.\"));\n    var r = e.path.child(tt.fromString(n));\n    if (!rt.isDocumentKey(r)) throw new U(P, \"Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '\".concat(r, \"' is not because it has an odd number of segments (\").concat(r.length, \").\"));\n    return jt(t, new rt(r));\n  }\n  if (n instanceof Dn) return jt(t, n._key);\n  throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: \".concat(ut(n), \".\"));\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction Ur(t, e) {\n  if (!Array.isArray(t) || 0 === t.length) throw new U(P, \"Invalid Query. A non-empty array is required for '\".concat(e.toString(), \"' filters.\"));\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */\nfunction jr(t, e) {\n  if (e.isInequality()) {\n    var _n16 = Ae(t),\n      r = e.field;\n    if (null !== _n16 && !_n16.isEqual(r)) throw new U(P, \"Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '\".concat(_n16.toString(), \"' and '\").concat(r.toString(), \"'\"));\n    var s = Ee(t);\n    null !== s && Br(t, r, s);\n  }\n  var n = function (t, e) {\n    var _iterator15 = _createForOfIteratorHelper(t),\n      _step15;\n    try {\n      for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n        var _n17 = _step15.value;\n        var _iterator16 = _createForOfIteratorHelper(_n17.getFlattenedFilters()),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _t27 = _step16.value;\n            if (e.indexOf(_t27.op) >= 0) return _t27.op;\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n    } catch (err) {\n      _iterator15.e(err);\n    } finally {\n      _iterator15.f();\n    }\n    return null;\n  }(t.filters, function (t) {\n    switch (t) {\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return [\"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */];\n\n      case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n      case \"in\" /* Operator.IN */:\n        return [\"not-in\" /* Operator.NOT_IN */];\n\n      case \"not-in\" /* Operator.NOT_IN */:\n        return [\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, \"in\" /* Operator.IN */, \"not-in\" /* Operator.NOT_IN */, \"!=\" /* Operator.NOT_EQUAL */];\n\n      default:\n        return [];\n    }\n  }(e.op));\n  if (null !== n)\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw n === e.op ? new U(P, \"Invalid query. You cannot use more than one '\".concat(e.op.toString(), \"' filter.\")) : new U(P, \"Invalid query. You cannot use '\".concat(e.op.toString(), \"' filters with '\").concat(n.toString(), \"' filters.\"));\n}\nfunction Br(t, e, n) {\n  if (!n.isEqual(e)) throw new U(P, \"Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '\".concat(e.toString(), \"' and so you must also use '\").concat(e.toString(), \"' as your first argument to orderBy(), but your first orderBy() is on field '\").concat(n.toString(), \"' instead.\"));\n}\nfunction zr(t, e) {\n  if (!(e instanceof Ar || e instanceof Tr)) throw new U(P, \"Function \".concat(t, \"() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.\"));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction Qr(t, e, n) {\n  var r;\n  // Cast to `any` in order to satisfy the union type constraint on\n  // toFirestore().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;\n}\nvar Wr = /*#__PURE__*/function (_ref7) {\n  _inherits(Wr, _ref7);\n  function Wr(t) {\n    var _this38;\n    _classCallCheck(this, Wr);\n    _this38 = _possibleConstructorReturn(this, _getPrototypeOf(Wr).call(this)), _this38.firestore = t;\n    return _this38;\n  }\n  _createClass(Wr, [{\n    key: \"convertBytes\",\n    value: function convertBytes(t) {\n      return new Cn(t);\n    }\n  }, {\n    key: \"convertReference\",\n    value: function convertReference(t) {\n      var e = this.convertDocumentKey(t, this.firestore._databaseId);\n      return new Dn(this.firestore, /* converter= */null, e);\n    }\n  }]);\n  return Wr;\n}( /*#__PURE__*/function () {\n  function _class4() {\n    _classCallCheck(this, _class4);\n  }\n  _createClass(_class4, [{\n    key: \"convertValue\",\n    value: function convertValue(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"none\";\n      switch (kt(t)) {\n        case 0 /* TypeOrder.NullValue */:\n          return null;\n        case 1 /* TypeOrder.BooleanValue */:\n          return t.booleanValue;\n        case 2 /* TypeOrder.NumberValue */:\n          return Dt(t.integerValue || t.doubleValue);\n        case 3 /* TypeOrder.TimestampValue */:\n          return this.convertTimestamp(t.timestampValue);\n        case 4 /* TypeOrder.ServerTimestampValue */:\n          return this.convertServerTimestamp(t, e);\n        case 5 /* TypeOrder.StringValue */:\n          return t.stringValue;\n        case 6 /* TypeOrder.BlobValue */:\n          return this.convertBytes(Nt(t.bytesValue));\n        case 7 /* TypeOrder.RefValue */:\n          return this.convertReference(t.referenceValue);\n        case 8 /* TypeOrder.GeoPointValue */:\n          return this.convertGeoPoint(t.geoPointValue);\n        case 9 /* TypeOrder.ArrayValue */:\n          return this.convertArray(t.arrayValue, e);\n        case 10 /* TypeOrder.ObjectValue */:\n          return this.convertObject(t.mapValue, e);\n        default:\n          throw b();\n      }\n    }\n  }, {\n    key: \"convertObject\",\n    value: function convertObject(t, e) {\n      var _this39 = this;\n      var n = {};\n      return Tt(t.fields, function (t, r) {\n        n[t] = _this39.convertValue(r, e);\n      }), n;\n    }\n  }, {\n    key: \"convertGeoPoint\",\n    value: function convertGeoPoint(t) {\n      return new jn(Dt(t.latitude), Dt(t.longitude));\n    }\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(t, e) {\n      var _this40 = this;\n      return (t.values || []).map(function (t) {\n        return _this40.convertValue(t, e);\n      });\n    }\n  }, {\n    key: \"convertServerTimestamp\",\n    value: function convertServerTimestamp(t, e) {\n      switch (e) {\n        case \"previous\":\n          var n = St(t);\n          return null == n ? null : this.convertValue(n, e);\n        case \"estimate\":\n          return this.convertTimestamp(qt(t));\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"convertTimestamp\",\n    value: function convertTimestamp(t) {\n      var e = $t(t);\n      return new Ft(e.seconds, e.nanos);\n    }\n  }, {\n    key: \"convertDocumentKey\",\n    value: function convertDocumentKey(t, e) {\n      var n = tt.fromString(t);\n      E(fn(n));\n      var r = new J(n.get(1), n.get(3)),\n        s = new rt(n.popFirst(5));\n      return r.isEqual(e) ||\n      // TODO(b/64130202): Somehow support foreign references.\n      g(\"Document \".concat(s, \" contains a document reference within a different database (\").concat(r.projectId, \"/\").concat(r.database, \") which is not supported. It will be treated as a reference in the current database (\").concat(e.projectId, \"/\").concat(e.database, \") instead.\")), s;\n    }\n  }]);\n  return _class4;\n}());\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */\nfunction Gr(t) {\n  var e = bn((t = ct(t, Dn)).firestore),\n    n = new Wr(t.firestore);\n  return yn(e, [t._key]).then(function (e) {\n    E(1 === e.length);\n    var r = e[0];\n    return new mr(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n  });\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */\nfunction Kr(t) {\n  !function (t) {\n    if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new U(k, \"limitToLast() queries require specifying at least one orderBy() clause\");\n  }((t = ct(t, Nn))._query);\n  var e = bn(t.firestore),\n    n = new Wr(t.firestore);\n  return gn(e, t._query).then(function (e) {\n    var r = e.map(function (e) {\n      return new pr(t.firestore, n, e.key, e, t.converter);\n    });\n    return \"L\" /* LimitType.Last */ === t._query.limitType &&\n    // Limit to last queries reverse the orderBy constraint that was\n    // specified by the user. As such, we need to reverse the order of the\n    // results to return the documents in the expected order.\n    r.reverse(), new yr(t, r);\n  });\n}\nfunction Yr(t, e, n) {\n  var r = Qr((t = ct(t, Dn)).converter, e, n),\n    s = Hn(Yn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n  return pn(bn(t.firestore), [s.toMutation(t._key, Oe.none())]);\n}\nfunction Hr(t, e, n) {\n  var s = Yn((t = ct(t, Dn)).firestore);\n  // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n  var i;\n  for (var _len15 = arguments.length, r = new Array(_len15 > 3 ? _len15 - 3 : 0), _key15 = 3; _key15 < _len15; _key15++) {\n    r[_key15 - 3] = arguments[_key15];\n  }\n  i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Ln ? sr(s, \"updateDoc\", t._key, e, n, r) : rr(s, \"updateDoc\", t._key, e);\n  return pn(bn(t.firestore), [i.toMutation(t._key, Oe.exists(!0))]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */\nfunction Zr(t) {\n  return pn(bn((t = ct(t, Dn)).firestore), [new Me(t._key, Oe.none())]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */\nfunction Jr(t, e) {\n  var n = qn(t = ct(t, Fn)),\n    r = Qr(t.converter, e),\n    s = Hn(Yn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n  return pn(bn(t.firestore), [s.toMutation(n._key, Oe.exists(!1))]).then(function () {\n    return n;\n  });\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\nfunction Xr(t) {\n  return ts(t, {\n    count: rs()\n  });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, is downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n * @internal TODO (sum/avg) remove when public\n */\nfunction ts(t, e) {\n  var n = ct(t.firestore, An),\n    r = bn(n),\n    s = function (t, e) {\n      var n = [];\n      for (var _r6 in t) Object.prototype.hasOwnProperty.call(t, _r6) && n.push(e(t[_r6], _r6, t));\n      return n;\n    }(e, function (t, e) {\n      return new _t(new gt(e), t._aggregateType, t._internalFieldPath);\n    });\n  // Run the aggregation and convert the results\n  return _n(r, t._query, s).then(function (e) {\n    return function (t, e, n) {\n      var r = new Wr(t);\n      return new $n(e, r, n);\n    }\n    /**\n    * Create an AggregateField object that can be used to compute the sum of\n    * a specified field over a range of documents in the result set of a query.\n    * @param field Specifies the field to sum across the result set.\n    * @internal TODO (sum/avg) remove when public\n    */(n, t, e);\n  });\n}\nfunction es(t) {\n  return new Vn(\"sum\", hr(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n * @internal TODO (sum/avg) remove when public\n */\nfunction ns(t) {\n  return new Vn(\"avg\", hr(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n * @internal TODO (sum/avg) remove when public\n */\nfunction rs() {\n  return new Vn(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n * @internal TODO (sum/avg) remove when public\n */\nfunction ss(t, e) {\n  var n, r;\n  return t instanceof Vn && e instanceof Vn && t._aggregateType === e._aggregateType && (null === (n = t._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString()) === (null === (r = e._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\nfunction is(t, e) {\n  return kn(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\nfunction os() {\n  return new Zn(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\nfunction us() {\n  return new Xn(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nfunction cs() {\n  for (var _len16 = arguments.length, t = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n    t[_key16] = arguments[_key16];\n  }\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new tr(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction as() {\n  for (var _len17 = arguments.length, t = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n    t[_key17] = arguments[_key17];\n  }\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new er(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction hs(t) {\n  return new nr(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\nvar ls = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function ls(t, e) {\n    _classCallCheck(this, ls);\n    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = Yn(t);\n  }\n  _createClass(ls, [{\n    key: \"set\",\n    value: function set(t, e, n) {\n      this._verifyNotCommitted();\n      var r = fs(t, this._firestore),\n        s = Qr(r.converter, e, n),\n        i = Hn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n      return this._mutations.push(i.toMutation(r._key, Oe.none())), this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, e, n) {\n      this._verifyNotCommitted();\n      var s = fs(t, this._firestore);\n      // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n      var i;\n      for (var _len18 = arguments.length, r = new Array(_len18 > 3 ? _len18 - 3 : 0), _key18 = 3; _key18 < _len18; _key18++) {\n        r[_key18 - 3] = arguments[_key18];\n      }\n      return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Ln ? sr(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : rr(this._dataReader, \"WriteBatch.update\", s._key, e), this._mutations.push(i.toMutation(s._key, Oe.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      this._verifyNotCommitted();\n      var e = fs(t, this._firestore);\n      return this._mutations = this._mutations.concat(new Me(e._key, Oe.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n  }, {\n    key: \"_verifyNotCommitted\",\n    value: function _verifyNotCommitted() {\n      if (this._committed) throw new U(S, \"A write batch can no longer be used after commit() has been called.\");\n    }\n  }]);\n  return ls;\n}();\nfunction fs(t, e) {\n  if ((t = getModularInstance(t)).firestore !== e) throw new U(P, \"Provided document reference is from a different Firestore instance.\");\n  return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */\nfunction ds(t) {\n  var e = bn(t = ct(t, An));\n  return new ls(t, function (t) {\n    return pn(e, t);\n  });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar ws = /*#__PURE__*/function () {\n  function ws(t) {\n    _classCallCheck(this, ws);\n    this.datastore = t,\n    // The version of each document that was read during this transaction.\n    this.readVersions = new Map(), this.mutations = [], this.committed = !1,\n    /**\n     * A deferred usage error that occurred previously in this transaction that\n     * will cause the transaction to fail once it actually commits.\n     */\n    this.lastWriteError = null,\n    /**\n     * Set of documents that have been written in the transaction.\n     *\n     * When there's more than one write to the same key in a transaction, any\n     * writes after the first are handled differently.\n     */\n    this.writtenDocs = new Set();\n  }\n  _createClass(ws, [{\n    key: \"lookup\",\n    value: function () {\n      var _lookup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(t) {\n        var _this41 = this;\n        var e;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.ensureCommitNotCalled(), this.mutations.length > 0)) {\n                _context2.next = 2;\n                break;\n              }\n              throw new U(P, \"Firestore transactions require all reads to be executed before all writes.\");\n            case 2:\n              _context2.next = 4;\n              return yn(this.datastore, t);\n            case 4:\n              e = _context2.sent;\n              return _context2.abrupt(\"return\", (e.forEach(function (t) {\n                return _this41.recordVersion(t);\n              }), e));\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function lookup(_x14) {\n        return _lookup.apply(this, arguments);\n      }\n      return lookup;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(t, e) {\n      this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, e) {\n      try {\n        this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n      } catch (t) {\n        this.lastWriteError = t;\n      }\n      this.writtenDocs.add(t.toString());\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      this.write(new Me(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n  }, {\n    key: \"commit\",\n    value: function () {\n      var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this42 = this;\n        var t;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this.ensureCommitNotCalled(), this.lastWriteError)) {\n                _context3.next = 2;\n                break;\n              }\n              throw this.lastWriteError;\n            case 2:\n              t = this.readVersions; // For each mutation, note that the doc was written.\n              this.mutations.forEach(function (e) {\n                t.delete(e.key.toString());\n              });\n              // For each document that was read but not written to, we want to perform\n              // a `verify` operation.\n              t.forEach(function (t, e) {\n                var n = rt.fromPath(e);\n                _this42.mutations.push(new Ue(n, _this42.precondition(n)));\n              });\n              _context3.next = 7;\n              return pn(this.datastore, this.mutations);\n            case 7:\n              this.committed = !0;\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function commit() {\n        return _commit.apply(this, arguments);\n      }\n      return commit;\n    }()\n  }, {\n    key: \"recordVersion\",\n    value: function recordVersion(t) {\n      var e;\n      if (t.isFoundDocument()) e = t.version;else {\n        if (!t.isNoDocument()) throw b();\n        // Represent a deleted doc using SnapshotVersion.min().\n        e = he.min();\n      }\n      var n = this.readVersions.get(t.key.toString());\n      if (n) {\n        if (!e.isEqual(n))\n          // This transaction will fail no matter what.\n          throw new U(q, \"Document version changed between two reads.\");\n      } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n  }, {\n    key: \"precondition\",\n    value: function precondition(t) {\n      var e = this.readVersions.get(t.toString());\n      return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(he.min()) ? Oe.exists(!1) : Oe.updateTime(e) : Oe.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n  }, {\n    key: \"preconditionForUpdate\",\n    value: function preconditionForUpdate(t) {\n      var e = this.readVersions.get(t.toString());\n      // The first time a document is written, we want to take into account the\n      // read time and existence\n      if (!this.writtenDocs.has(t.toString()) && e) {\n        if (e.isEqual(he.min()))\n          // The document doesn't exist, so fail the transaction.\n          // This has to be validated locally because you can't send a\n          // precondition that a document does not exist without changing the\n          // semantics of the backend write to be an insert. This is the reverse\n          // of what we want, since we want to assert that the document doesn't\n          // exist but then send the update and have it fail. Since we can't\n          // express that to the backend, we have to validate locally.\n          // Note: this can change once we can send separate verify writes in the\n          // transaction.\n          throw new U(P, \"Can't update a document that doesn't exist.\");\n        // Document exists, base precondition on document update time.\n        return Oe.updateTime(e);\n      }\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Oe.exists(!0);\n    }\n  }, {\n    key: \"write\",\n    value: function write(t) {\n      this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n  }, {\n    key: \"ensureCommitNotCalled\",\n    value: function ensureCommitNotCalled() {}\n  }]);\n  return ws;\n}();\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ms = {\n  maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nvar ps = /*#__PURE__*/function () {\n  function ps(t, e, n, r, s) {\n    _classCallCheck(this, ps);\n    this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, this.deferred = s, this._t = n.maxAttempts, this.vt = new wn(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n  }\n  /** Runs the transaction and sets the result on deferred. */\n  _createClass(ps, [{\n    key: \"run\",\n    value: function run() {\n      this._t -= 1, this.bt();\n    }\n  }, {\n    key: \"bt\",\n    value: function bt() {\n      var _this43 = this;\n      this.vt.J( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var t, e;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              t = new ws(_this43.datastore), e = _this43.Et(t);\n              e && e.then(function (e) {\n                _this43.asyncQueue.enqueueAndForget(function () {\n                  return t.commit().then(function () {\n                    _this43.deferred.resolve(e);\n                  }).catch(function (t) {\n                    _this43.At(t);\n                  });\n                });\n              }).catch(function (t) {\n                _this43.At(t);\n              });\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      })));\n    }\n  }, {\n    key: \"Et\",\n    value: function Et(t) {\n      try {\n        var e = this.updateFunction(t);\n        return !ht(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), null);\n      } catch (t) {\n        // Do not retry errors thrown by user provided updateFunction.\n        return this.deferred.reject(t), null;\n      }\n    }\n  }, {\n    key: \"At\",\n    value: function At(t) {\n      var _this44 = this;\n      this._t > 0 && this.It(t) ? (this._t -= 1, this.asyncQueue.enqueueAndForget(function () {\n        return _this44.bt(), Promise.resolve();\n      })) : this.deferred.reject(t);\n    }\n  }, {\n    key: \"It\",\n    value: function It(t) {\n      if (\"FirebaseError\" === t.name) {\n        // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n        // non-matching document versions with ABORTED. These errors should be retried.\n        var e = t.code;\n        return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n        /**\n        * Determines whether an error code represents a permanent error when received\n        * in response to a non-write operation.\n        *\n        * See isPermanentWriteError for classifying write errors.\n        */\n        function (t) {\n          switch (t) {\n            default:\n              return b();\n            case T:\n            case R:\n            case V:\n            case x:\n            case C:\n            case L:\n            // Unauthenticated means something went wrong with our token and we need\n            // to retry with new credentials which will happen automatically.\n            case F:\n              return !1;\n            case P:\n            case $:\n            case D:\n            case N:\n            case S:\n            // Aborted might be retried in some scenarios, but that is dependant on\n            // the context and should handled individually by the calling code.\n            // See https://cloud.google.com/apis/design/errors.\n            case q:\n            case O:\n            case k:\n            case M:\n              return !0;\n          }\n        }(e);\n      }\n      return !1;\n    }\n  }]);\n  return ps;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */\nfunction ys() {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nvar gs = /*#__PURE__*/function () {\n  function gs(t, e, n, r, s) {\n    _classCallCheck(this, gs);\n    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, this.deferred = new j(), this.then = this.deferred.promise.then.bind(this.deferred.promise),\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(function (t) {});\n  }\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  _createClass(gs, [{\n    key: \"start\",\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */\n    value: function start(t) {\n      var _this45 = this;\n      this.timerHandle = setTimeout(function () {\n        return _this45.handleDelayElapsed();\n      }, t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */\n  }, {\n    key: \"skipDelay\",\n    value: function skipDelay() {\n      return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel(t) {\n      null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(T, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n  }, {\n    key: \"handleDelayElapsed\",\n    value: function handleDelayElapsed() {\n      var _this46 = this;\n      this.asyncQueue.enqueueAndForget(function () {\n        return null !== _this46.timerHandle ? (_this46.clearTimeout(), _this46.op().then(function (t) {\n          return _this46.deferred.resolve(t);\n        })) : Promise.resolve();\n      });\n    }\n  }, {\n    key: \"clearTimeout\",\n    value: function (_clearTimeout) {\n      function clearTimeout() {\n        return _clearTimeout.apply(this, arguments);\n      }\n      clearTimeout.toString = function () {\n        return _clearTimeout.toString();\n      };\n      return clearTimeout;\n    }(function () {\n      null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);\n    })\n  }], [{\n    key: \"createAndSchedule\",\n    value: function createAndSchedule(t, e, n, r, s) {\n      var i = Date.now() + n,\n        o = new gs(t, e, i, r, s);\n      return o.start(n), o;\n    }\n  }]);\n  return gs;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _s = /*#__PURE__*/function () {\n  function _s() {\n    var _this47 = this;\n    _classCallCheck(this, _s);\n    // The last promise in the queue.\n    this.Tt = Promise.resolve(),\n    // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.Rt = [],\n    // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this.Pt = !1,\n    // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.Vt = [],\n    // visible for testing\n    this.$t = null,\n    // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.Dt = !1,\n    // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.Nt = !1,\n    // List of TimerIds to fast-forward delays for.\n    this.Ft = [],\n    // Backoff timer used to schedule retries for retryable operations\n    this.vt = new wn(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */),\n    // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.xt = function () {\n      var t = ys();\n      t && y(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), _this47.vt.tt();\n    };\n    var t = ys();\n    t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.xt);\n  }\n  _createClass(_s, [{\n    key: \"enqueueAndForget\",\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */\n    value: function enqueueAndForget(t) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.enqueue(t);\n    }\n  }, {\n    key: \"enqueueAndForgetEvenWhileRestricted\",\n    value: function enqueueAndForgetEvenWhileRestricted(t) {\n      this.St(),\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.qt(t);\n    }\n  }, {\n    key: \"enterRestrictedMode\",\n    value: function enterRestrictedMode(t) {\n      if (!this.Pt) {\n        this.Pt = !0, this.Nt = t || !1;\n        var e = ys();\n        e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.xt);\n      }\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue(t) {\n      var _this48 = this;\n      if (this.St(), this.Pt)\n        // Return a Promise which never resolves.\n        return new Promise(function () {});\n      // Create a deferred Promise that we can return to the callee. This\n      // allows us to return a \"hanging Promise\" only to the callee and still\n      // advance the queue even when the operation is not run.\n      var e = new j();\n      return this.qt(function () {\n        return _this48.Pt && _this48.Nt ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise);\n      }).then(function () {\n        return e.promise;\n      });\n    }\n  }, {\n    key: \"enqueueRetryable\",\n    value: function enqueueRetryable(t) {\n      var _this49 = this;\n      this.enqueueAndForget(function () {\n        return _this49.Rt.push(t), _this49.Ot();\n      });\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */\n  }, {\n    key: \"Ot\",\n    value: function () {\n      var _Ot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _this50 = this;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(0 !== this.Rt.length)) {\n                _context5.next = 14;\n                break;\n              }\n              _context5.prev = 1;\n              _context5.next = 4;\n              return this.Rt[0]();\n            case 4:\n              this.Rt.shift();\n              this.vt.reset();\n              _context5.next = 13;\n              break;\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](1);\n              if (\n              /**\n              * @license\n              * Copyright 2017 Google LLC\n              *\n              * Licensed under the Apache License, Version 2.0 (the \"License\");\n              * you may not use this file except in compliance with the License.\n              * You may obtain a copy of the License at\n              *\n              *   http://www.apache.org/licenses/LICENSE-2.0\n              *\n              * Unless required by applicable law or agreed to in writing, software\n              * distributed under the License is distributed on an \"AS IS\" BASIS,\n              * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n              * See the License for the specific language governing permissions and\n              * limitations under the License.\n              */\n              /** Verifies whether `e` is an IndexedDbTransactionError. */\n              function (t) {\n                // Use name equality, as instanceof checks on errors don't work with errors\n                // that wrap other errors.\n                return \"IndexedDbTransactionError\" === t.name;\n              }\n              /**\n              * @license\n              * Copyright 2020 Google LLC\n              *\n              * Licensed under the Apache License, Version 2.0 (the \"License\");\n              * you may not use this file except in compliance with the License.\n              * You may obtain a copy of the License at\n              *\n              *   http://www.apache.org/licenses/LICENSE-2.0\n              *\n              * Unless required by applicable law or agreed to in writing, software\n              * distributed under the License is distributed on an \"AS IS\" BASIS,\n              * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n              * See the License for the specific language governing permissions and\n              * limitations under the License.\n              */(_context5.t0)) {\n                _context5.next = 12;\n                break;\n              }\n              throw _context5.t0;\n            case 12:\n              // Failure will be handled by AsyncQueue\n              y(\"AsyncQueue\", \"Operation failed with retryable error: \" + _context5.t0);\n            case 13:\n              this.Rt.length > 0 &&\n              // If there are additional operations, we re-schedule `retryNextOp()`.\n              // This is necessary to run retryable operations that failed during\n              // their initial attempt since we don't know whether they are already\n              // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n              // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n              // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n              // call scheduled here.\n              // Since `backoffAndRun()` cancels an existing backoff and schedules a\n              // new backoff on every call, there is only ever a single additional\n              // operation in the queue.\n              this.vt.J(function () {\n                return _this50.Ot();\n              });\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[1, 8]]);\n      }));\n      function Ot() {\n        return _Ot.apply(this, arguments);\n      }\n      return Ot;\n    }()\n  }, {\n    key: \"qt\",\n    value: function qt(t) {\n      var _this51 = this;\n      var e = this.Tt.then(function () {\n        return _this51.Dt = !0, t().catch(function (t) {\n          _this51.$t = t, _this51.Dt = !1;\n          var e =\n          /**\n          * Chrome includes Error.message in Error.stack. Other browsers do not.\n          * This returns expected output of message + stack when available.\n          * @param error - Error or FirestoreError\n          */\n          function (t) {\n            var e = t.message || \"\";\n            t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n            return e;\n          }\n          /**\n          * @license\n          * Copyright 2020 Google LLC\n          *\n          * Licensed under the Apache License, Version 2.0 (the \"License\");\n          * you may not use this file except in compliance with the License.\n          * You may obtain a copy of the License at\n          *\n          *   http://www.apache.org/licenses/LICENSE-2.0\n          *\n          * Unless required by applicable law or agreed to in writing, software\n          * distributed under the License is distributed on an \"AS IS\" BASIS,\n          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          * See the License for the specific language governing permissions and\n          * limitations under the License.\n          */\n          // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n          // legacy SDK.\n          /**\n          * A reference to a transaction.\n          *\n          * The `Transaction` object passed to a transaction's `updateFunction` provides\n          * the methods to read and write data within the transaction context. See\n          * {@link runTransaction}.\n          */(t);\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw g(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        }).then(function (t) {\n          return _this51.Dt = !1, t;\n        });\n      });\n      return this.Tt = e, e;\n    }\n  }, {\n    key: \"enqueueAfterDelay\",\n    value: function enqueueAfterDelay(t, e, n) {\n      var _this52 = this;\n      this.St(),\n      // Fast-forward delays for timerIds that have been overriden.\n      this.Ft.indexOf(t) > -1 && (e = 0);\n      var r = gs.createAndSchedule(this, t, e, n, function (t) {\n        return _this52.kt(t);\n      });\n      return this.Vt.push(r), r;\n    }\n  }, {\n    key: \"St\",\n    value: function St() {\n      this.$t && b();\n    }\n  }, {\n    key: \"verifyOperationInProgress\",\n    value: function verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */\n  }, {\n    key: \"Ct\",\n    value: function () {\n      var _Ct = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var t;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              t = this.Tt;\n              _context6.next = 3;\n              return t;\n            case 3:\n              if (t !== this.Tt) {\n                _context6.next = 0;\n                break;\n              }\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function Ct() {\n        return _Ct.apply(this, arguments);\n      }\n      return Ct;\n    }()\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */\n  }, {\n    key: \"Lt\",\n    value: function Lt(t) {\n      var _iterator17 = _createForOfIteratorHelper(this.Vt),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var e = _step17.value;\n          if (e.timerId === t) return !0;\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */\n  }, {\n    key: \"Mt\",\n    value: function Mt(t) {\n      var _this53 = this;\n      // Note that draining may generate more delayed ops, so we do that first.\n      return this.Ct().then(function () {\n        // Run ops in the same order they'd run if they ran naturally.\n        _this53.Vt.sort(function (t, e) {\n          return t.targetTimeMs - e.targetTimeMs;\n        });\n        var _iterator18 = _createForOfIteratorHelper(_this53.Vt),\n          _step18;\n        try {\n          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n            var e = _step18.value;\n            if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n          }\n        } catch (err) {\n          _iterator18.e(err);\n        } finally {\n          _iterator18.f();\n        }\n        return _this53.Ct();\n      });\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */\n  }, {\n    key: \"Ut\",\n    value: function Ut(t) {\n      this.Ft.push(t);\n    } /** Called once a DelayedOperation is run or canceled. */\n  }, {\n    key: \"kt\",\n    value: function kt(t) {\n      // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n      var e = this.Vt.indexOf(t);\n      this.Vt.splice(e, 1);\n    }\n  }, {\n    key: \"isShuttingDown\",\n    get: function get() {\n      return this.Pt;\n    }\n  }]);\n  return _s;\n}();\nvar vs = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function vs(t, e) {\n    _classCallCheck(this, vs);\n    this._firestore = t, this._transaction = e, this._dataReader = Yn(t);\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n  _createClass(vs, [{\n    key: \"get\",\n    value: function get(t) {\n      var _this54 = this;\n      var e = fs(t, this._firestore),\n        n = new Wr(this._firestore);\n      return this._transaction.lookup([e._key]).then(function (t) {\n        if (!t || 1 !== t.length) return b();\n        var r = t[0];\n        if (r.isFoundDocument()) return new mr(_this54._firestore, n, r.key, r, e.converter);\n        if (r.isNoDocument()) return new mr(_this54._firestore, n, e._key, null, e.converter);\n        throw b();\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(t, e, n) {\n      var r = fs(t, this._firestore),\n        s = Qr(r.converter, e, n),\n        i = Hn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n      return this._transaction.set(r._key, i), this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, e, n) {\n      var s = fs(t, this._firestore);\n      // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n      var i;\n      for (var _len19 = arguments.length, r = new Array(_len19 > 3 ? _len19 - 3 : 0), _key19 = 3; _key19 < _len19; _key19++) {\n        r[_key19 - 3] = arguments[_key19];\n      }\n      return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Ln ? sr(this._dataReader, \"Transaction.update\", s._key, e, n, r) : rr(this._dataReader, \"Transaction.update\", s._key, e), this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      var e = fs(t, this._firestore);\n      return this._transaction.delete(e._key), this;\n    }\n  }]);\n  return vs;\n}();\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\nfunction bs(t, e, n) {\n  var r = bn(t = ct(t, An)),\n    s = Object.assign(Object.assign({}, ms), n);\n  !function (t) {\n    if (t.maxAttempts < 1) throw new U(P, \"Max attempts must be at least 1\");\n  }(s);\n  var i = new j();\n  return new ps(new _s(), r, s, function (n) {\n    return e(new vs(t, n));\n  }, i).run(), i.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */\n!function (t) {\n  w = t;\n}(\"\".concat(SDK_VERSION, \"_lite\")), _registerComponent(new Component(\"firestore/lite\", function (t, _ref9) {\n  var e = _ref9.instanceIdentifier,\n    n = _ref9.options;\n  var r = t.getProvider(\"app\").getImmediate(),\n    s = new An(new W(t.getProvider(\"auth-internal\")), new H(t.getProvider(\"app-check-internal\")), function (t, e) {\n      if (!Object.prototype.hasOwnProperty.apply(t.options, [\"projectId\"])) throw new U(P, '\"projectId\" not provided in firebase.initializeApp.');\n      return new J(t.options.projectId, e);\n    }\n    /**\n    * @license\n    * Copyright 2017 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */(r, e), r);\n  return n && s._setSettings(n), s;\n}, \"PUBLIC\").setMultipleInstances(!0)),\n// RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nregisterVersion(\"firestore-lite\", \"3.8.4\", \"\"), registerVersion(\"firestore-lite\", \"3.8.4\", \"esm2017\");\nexport { Vn as AggregateField, $n as AggregateQuerySnapshot, Cn as Bytes, Fn as CollectionReference, Dn as DocumentReference, mr as DocumentSnapshot, Ln as FieldPath, Un as FieldValue, An as Firestore, U as FirestoreError, jn as GeoPoint, Nn as Query, Tr as QueryCompositeFilterConstraint, br as QueryConstraint, pr as QueryDocumentSnapshot, Or as QueryEndAtConstraint, Ar as QueryFieldFilterConstraint, Dr as QueryLimitConstraint, Vr as QueryOrderByConstraint, yr as QuerySnapshot, xr as QueryStartAtConstraint, Ft as Timestamp, vs as Transaction, ls as WriteBatch, Jr as addDoc, ss as aggregateFieldEqual, is as aggregateQuerySnapshotEqual, Pr as and, as as arrayRemove, cs as arrayUnion, ns as average, xn as collection, Sn as collectionGroup, Rn as connectFirestoreEmulator, rs as count, Zr as deleteDoc, os as deleteField, qn as doc, Mn as documentId, Cr as endAt, kr as endBefore, ts as getAggregate, Xr as getCount, Gr as getDoc, Kr as getDocs, Tn as getFirestore, hs as increment, In as initializeFirestore, Nr as limit, Fr as limitToLast, Rr as or, $r as orderBy, Er as query, kn as queryEqual, On as refEqual, bs as runTransaction, us as serverTimestamp, Yr as setDoc, p as setLogLevel, gr as snapshotEqual, qr as startAfter, Sr as startAt, es as sum, Pn as terminate, Hr as updateDoc, Ir as where, ds as writeBatch };","map":null,"metadata":{},"sourceType":"module"}